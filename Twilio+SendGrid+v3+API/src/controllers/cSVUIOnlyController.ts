/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  V3MarketingContactsSearch500Error1Error,
} from '../errors/v3MarketingContactsSearch500Error1Error';
import {
  V3MessagesDownloadResponse,
  v3MessagesDownloadResponseSchema,
} from '../models/v3MessagesDownloadResponse';
import {
  V3MessagesDownloadResponse1,
  v3MessagesDownloadResponse1Schema,
} from '../models/v3MessagesDownloadResponse1';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class CSVUIOnlyController extends BaseController {
  /**
   * This request will kick off a backend process to generate a CSV file. Once generated, the worker will
   * then send an email for the user download the file. The link will expire in 3 days.
   *
   * The CSV fill contain the last 1 million messages. This endpoint will be rate limited to 1 request
   * every 12 hours (rate limit may change).
   *
   * This endpoint is similar to the GET Single Message endpoint - the only difference is that /download
   * is added to indicate that this is a CSV download requests but the same query is used to determine
   * what the CSV should contain.
   *
   * @param authorization
   * @param query         Uses a SQL like syntax to indicate which messages to include in the CSV
   * @return Response from the API call
   */
  async pOSTV3MessagesDownload(
    authorization: string,
    query?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3MessagesDownloadResponse>> {
    const req = this.createRequest('POST', '/v3/messages/download');
    const mapped = req.prepareArgs({
      authorization: [authorization, string()],
      query: [query, optional(string())],
    });
    req.header('Authorization', mapped.authorization);
    req.query('query', mapped.query);
    req.throwOn(400, V3MarketingContactsSearch500Error1Error, '');
    req.throwOn(429, V3MarketingContactsSearch500Error1Error, '');
    req.throwOn(500, V3MarketingContactsSearch500Error1Error, '');
    return req.callAsJson(v3MessagesDownloadResponseSchema, requestOptions);
  }

  /**
   * **This endpoint will return a presigned URL that can be used to download the CSV that was requested
   * from the "Request a CSV" endpoint.**
   *
   * @param downloadUuid  UUID used to locate the download csv request entry in the DB.  This is the UUID
   *                                provided in the email sent to the user when their csv file is ready to download
   * @param authorization
   * @return Response from the API call
   */
  async gETV3MessagesDownloadDownloadUuid(
    downloadUuid: string,
    authorization: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3MessagesDownloadResponse1>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      downloadUuid: [downloadUuid, string()],
      authorization: [authorization, string()],
    });
    req.header('Authorization', mapped.authorization);
    req.appendTemplatePath`/v3/messages/download/${mapped.downloadUuid}`;
    req.throwOn(404, V3MarketingContactsSearch500Error1Error, '');
    req.throwOn(500, V3MarketingContactsSearch500Error1Error, '');
    return req.callAsJson(v3MessagesDownloadResponse1Schema, requestOptions);
  }
}
