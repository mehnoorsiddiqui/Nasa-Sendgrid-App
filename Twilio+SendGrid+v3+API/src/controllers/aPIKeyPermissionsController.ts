/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  GlobalErrorResponseSchema1Error,
} from '../errors/globalErrorResponseSchema1Error';
import { V3MailSend500Error1Error } from '../errors/v3MailSend500Error1Error';
import { V3Scopes401Error } from '../errors/v3Scopes401Error';
import {
  V3ScopesResponse,
  v3ScopesResponseSchema,
} from '../models/v3ScopesResponse';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class APIKeyPermissionsController extends BaseController {
  /**
   * **This endpoint returns a list of all scopes that this user has access to.**
   *
   * API Keys are used to authenticate with [SendGrid's v3 API](https://sendgrid.api-docs.io/v3.0/how-to-
   * use-the-sendgrid-v3-api/api-authorization).
   *
   * API Keys may be assigned certain permissions, or scopes, that limit which API endpoints they are
   * able to access.
   *
   * This endpoint returns all the scopes assigned to the key you use to authenticate with it. To
   * retrieve the scopes assigned to another key, you can pass an API key ID to the "Retrieve an existing
   * API key" endpoint.
   *
   * For a more detailed explanation of how you can use API Key permissions, please visit our [API Keys
   * documentation](https://sendgrid.com/docs/ui/account-and-settings/api-keys/).
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETScopes(
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3ScopesResponse>> {
    const req = this.createRequest('GET', '/v3/scopes');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.throwOn(401, V3Scopes401Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(v3ScopesResponseSchema, requestOptions);
  }
}
