/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import {
  V3ScopesRequestsApprove404Error1Error,
} from '../errors/v3ScopesRequestsApprove404Error1Error';
import { V3Teammates400Error1Error } from '../errors/v3Teammates400Error1Error';
import {
  V3TeammatesPending404Error1Error,
} from '../errors/v3TeammatesPending404Error1Error';
import {
  V3ScopesRequestsApproveResponse,
  v3ScopesRequestsApproveResponseSchema,
} from '../models/v3ScopesRequestsApproveResponse';
import {
  V3ScopesRequestsResponse,
  v3ScopesRequestsResponseSchema,
} from '../models/v3ScopesRequestsResponse';
import {
  V3TeammatesPendingResendResponse,
  v3TeammatesPendingResendResponseSchema,
} from '../models/v3TeammatesPendingResendResponse';
import {
  V3TeammatesPendingResponse,
  v3TeammatesPendingResponseSchema,
} from '../models/v3TeammatesPendingResponse';
import {
  V3TeammatesRequest,
  v3TeammatesRequestSchema,
} from '../models/v3TeammatesRequest';
import {
  V3TeammatesRequest1,
  v3TeammatesRequest1Schema,
} from '../models/v3TeammatesRequest1';
import {
  V3TeammatesResponse,
  v3TeammatesResponseSchema,
} from '../models/v3TeammatesResponse';
import {
  V3TeammatesResponse1,
  v3TeammatesResponse1Schema,
} from '../models/v3TeammatesResponse1';
import {
  V3TeammatesResponse2,
  v3TeammatesResponse2Schema,
} from '../models/v3TeammatesResponse2';
import {
  V3TeammatesResponse3,
  v3TeammatesResponse3Schema,
} from '../models/v3TeammatesResponse3';
import {
  V3TeammatesResponse4,
  v3TeammatesResponse4Schema,
} from '../models/v3TeammatesResponse4';
import { array, number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class TeammatesController extends BaseController {
  /**
   * **This endpoint allows you to invite a Teammate to your account via email.**
   *
   * You can set a Teammate's initial permissions using the `scopes` array in the request body.
   * Teammate's will receive a minimum set of scopes from Twilio SendGrid that are necessary for the
   * Teammate to function.
   *
   * **Note:** A teammate invite will expire after 7 days, but you may resend the invitation at any time
   * to reset the expiration date.
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the API
   *                                                  call as if the subuser account was making the call.
   * @param body
   * @return Response from the API call
   */
  async pOSTV3Teammates(
    onBehalfOf?: string,
    body?: V3TeammatesRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3TeammatesResponse>> {
    const req = this.createRequest('POST', '/v3/teammates');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(v3TeammatesRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    req.throwOn(400, V3Teammates400Error1Error, '');
    return req.callAsJson(v3TeammatesResponseSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve a list of all current Teammates.**
   *
   * You can limit the number of results returned using the `limit` query paramater. To return results
   * from a specific Teammate, use the `offset` paramter. The Response Headers will include pagination
   * info.
   *
   * @param limit        Number of items to return
   * @param offset       Paging offset
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETV3Teammates(
    limit?: number,
    offset?: number,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3TeammatesResponse1>> {
    const req = this.createRequest('GET', '/v3/teammates');
    const mapped = req.prepareArgs({
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    return req.callAsJson(v3TeammatesResponse1Schema, requestOptions);
  }

  /**
   * **This endpoint allows you to resend a Teammate invitation.**
   *
   * Teammate invitations will expire after 7 days. Resending an invitation will reset the expiration
   * date.
   *
   * @param token        The token for the invite that you want to resend.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async pOSTV3TeammatesPendingTokenResend(
    token: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3TeammatesPendingResendResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      token: [token, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/teammates/pending/${mapped.token}/resend`;
    req.throwOn(404, V3Teammates400Error1Error, '');
    return req.callAsJson(
      v3TeammatesPendingResendResponseSchema,
      requestOptions
    );
  }

  /**
   * **This endpoint allows you to retrieve a list of all recent access requests.**
   *
   * The Response Header's `link` parameter will include pagination info.
   *
   * @param limit  Optional field to limit the number of results returned.
   * @param offset Optional beginning point in the list to retrieve from.
   * @return Response from the API call
   */
  async gETV3ScopesRequests(
    limit?: number,
    offset?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3ScopesRequestsResponse[]>> {
    const req = this.createRequest('GET', '/v3/scopes/requests');
    const mapped = req.prepareArgs({
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
    });
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    return req.callAsJson(
      array(v3ScopesRequestsResponseSchema),
      requestOptions
    );
  }

  /**
   * **This endpoint allows you to retrieve a list of all pending Teammate invitations.**
   *
   * Each teammate invitation is valid for 7 days. Users may resend the invitation to refresh the
   * expiration date.
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETV3TeammatesPending(
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3TeammatesPendingResponse>> {
    const req = this.createRequest('GET', '/v3/teammates/pending');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    return req.callAsJson(v3TeammatesPendingResponseSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve a specific Teammate by username.**
   *
   * You can retrieve the username's for each of your Teammates using the "Retrieve all Teammates"
   * endpoint.
   *
   * @param username     The username of the teammate that you want to retrieve.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETV3TeammatesUsername(
    username: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3TeammatesResponse2>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      username: [username, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/teammates/${mapped.username}`;
    return req.callAsJson(v3TeammatesResponse2Schema, requestOptions);
  }

  /**
   * **This endpoint allows you to update a teammate’s permissions.**
   *
   * To turn a teammate into an admin, the request body should contain an `is_admin` set to `true`.
   * Otherwise, set `is_admin` to `false` and pass in all the scopes that a teammate should have.
   *
   * **Only the parent user or other admin teammates can update another teammate’s permissions.**
   *
   * **Admin users can only update permissions.**
   *
   * @param username     The username of the teammate that you want to retrieve.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API
   *                                                   call as if the subuser account was making the call.
   * @param body
   * @return Response from the API call
   */
  async pATCHV3TeammatesUsername(
    username: string,
    onBehalfOf?: string,
    body?: V3TeammatesRequest1,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3TeammatesResponse3>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      username: [username, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(v3TeammatesRequest1Schema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    req.appendTemplatePath`/v3/teammates/${mapped.username}`;
    req.throwOn(400, V3Teammates400Error1Error, '');
    req.throwOn(404, V3Teammates400Error1Error, '');
    return req.callAsJson(v3TeammatesResponse3Schema, requestOptions);
  }

  /**
   * **This endpoint allows you to delete a teammate.**
   *
   * **Only the parent user or an admin teammate can delete another teammate.**
   *
   * @param username     The username of the teammate that you want to retrieve.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async dELETEV3TeammatesUsername(
    username: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3TeammatesResponse4>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      username: [username, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/teammates/${mapped.username}`;
    req.throwOn(404, V3Teammates400Error1Error, '');
    return req.callAsJson(v3TeammatesResponse4Schema, requestOptions);
  }

  /**
   * **This endpoint allows you to approve an access attempt.**
   *
   * **Note:** Only teammate admins may approve another teammate’s access request.
   *
   * @param requestId  The ID of the request that you want to approve.
   * @return Response from the API call
   */
  async pATCHV3ScopesRequestsApproveId(
    requestId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3ScopesRequestsApproveResponse>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({ requestId: [requestId, string()] });
    req.appendTemplatePath`/v3/scopes/requests/${mapped.requestId}/approve`;
    req.throwOn(401, ApiError, '');
    req.throwOn(404, V3ScopesRequestsApprove404Error1Error, '');
    return req.callAsJson(
      v3ScopesRequestsApproveResponseSchema,
      requestOptions
    );
  }

  /**
   * **This endpoint allows you to deny an attempt to access your account.**
   *
   * **Note:** Only teammate admins may delete a teammate's access request.
   *
   * @param requestId  The ID of the request that you want to deny.
   * @return Response from the API call
   */
  async dELETEV3ScopesRequestsRequestId(
    requestId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ requestId: [requestId, string()] });
    req.appendTemplatePath`/v3/scopes/requests/${mapped.requestId}`;
    req.throwOn(401, ApiError, '');
    req.throwOn(404, V3Teammates400Error1Error, '');
    return req.call(requestOptions);
  }

  /**
   * **This endpoint allows you to delete a pending teammate invite.**
   *
   * @param token        The token for the invite you want to delete.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async dELETEV3TeammatesPendingToken(
    token: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      token: [token, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/teammates/pending/${mapped.token}`;
    req.throwOn(404, V3TeammatesPending404Error1Error, '');
    return req.call(requestOptions);
  }
}
