/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  V3MarketingFieldDefinitions400Error1Error,
} from '../errors/v3MarketingFieldDefinitions400Error1Error';
import {
  V3MarketingFieldDefinitions404Error1Error,
} from '../errors/v3MarketingFieldDefinitions404Error1Error';
import {
  V3MarketingFieldDefinitionsRequest,
  v3MarketingFieldDefinitionsRequestSchema,
} from '../models/v3MarketingFieldDefinitionsRequest';
import {
  V3MarketingFieldDefinitionsRequest1,
  v3MarketingFieldDefinitionsRequest1Schema,
} from '../models/v3MarketingFieldDefinitionsRequest1';
import {
  V3MarketingFieldDefinitionsResponse,
  v3MarketingFieldDefinitionsResponseSchema,
} from '../models/v3MarketingFieldDefinitionsResponse';
import {
  V3MarketingFieldDefinitionsResponse3,
  v3MarketingFieldDefinitionsResponse3Schema,
} from '../models/v3MarketingFieldDefinitionsResponse3';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class CustomFieldsController extends BaseController {
  /**
   * **This endpoint creates a new custom field definition.**
   *
   * Custom field definitions are created with the given `name` and `field_type`. Although field names
   * are stored in a case-sensitive manner, all field names must be case-insensitively unique. This means
   * you may create a field named `CamelCase` or `camelcase`, but not both. Additionally, a Custom Field
   * name cannot collide with any Reserved Field names. You should save the returned `id` value in order
   * to update or delete the field at a later date. You can have up to 120 custom fields.
   *
   * The custom field name should be created using only alphanumeric characters (A-Z and 0-9) and
   * underscores (\_). Custom fields can only begin with letters  A-Z or underscores (_). The field type
   * can be date, text, or number fields. The field type is important for creating segments from your
   * contact database.
   *
   * **Note: Creating a custom field that begins with a number will cause issues with sending in
   * Marketing Campaigns.**
   *
   * @param body
   * @return Response from the API call
   */
  async pOSTMcFieldDefinitions(
    body?: V3MarketingFieldDefinitionsRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3MarketingFieldDefinitionsResponse>> {
    const req = this.createRequest('POST', '/v3/marketing/field_definitions');
    const mapped = req.prepareArgs({
      body: [body, optional(v3MarketingFieldDefinitionsRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, V3MarketingFieldDefinitions400Error1Error, '');
    return req.callAsJson(
      v3MarketingFieldDefinitionsResponseSchema,
      requestOptions
    );
  }

  /**
   * **This endpoint retrieves all defined Custom Fields and Reserved Fields.**
   *
   * @return Response from the API call
   */
  async gETMcFieldDefinitions(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3MarketingFieldDefinitionsResponse3>> {
    const req = this.createRequest('GET', '/v3/marketing/field_definitions');
    return req.callAsJson(
      v3MarketingFieldDefinitionsResponse3Schema,
      requestOptions
    );
  }

  /**
   * **This endopoint allows you to update a defined Custom Field.**
   *
   * Only your Custom fields can be modified; Reserved Fields cannot be updated.
   *
   * @param customFieldId
   * @param body
   * @return Response from the API call
   */
  async pATCHMcFieldDefinitionsCustomFieldId(
    customFieldId: string,
    body?: V3MarketingFieldDefinitionsRequest1,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3MarketingFieldDefinitionsResponse>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      customFieldId: [customFieldId, string()],
      body: [body, optional(v3MarketingFieldDefinitionsRequest1Schema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/v3/marketing/field_definitions/${mapped.customFieldId}`;
    req.throwOn(400, V3MarketingFieldDefinitions400Error1Error, '');
    req.throwOn(404, V3MarketingFieldDefinitions404Error1Error, '');
    return req.callAsJson(
      v3MarketingFieldDefinitionsResponseSchema,
      requestOptions
    );
  }

  /**
   * **This endpoint deletes a defined Custom Field.**
   *
   * You cand delete only Custom Fields; Reserved Fields cannot be deleted.
   *
   * @param customFieldId
   * @return Response from the API call
   */
  async dELETEMcFieldDefinitionsCustomFieldId(
    customFieldId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      customFieldId: [customFieldId, string()],
    });
    req.appendTemplatePath`/v3/marketing/field_definitions/${mapped.customFieldId}`;
    req.throwOn(404, V3MarketingFieldDefinitions404Error1Error, '');
    return req.call(requestOptions);
  }
}
