/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import {
  GlobalErrorResponseSchema1Error,
} from '../errors/globalErrorResponseSchema1Error';
import {
  ListallSubusersforaparentresponse,
  listallSubusersforaparentresponseSchema,
} from '../models/listallSubusersforaparentresponse';
import { SubuserPOST, subuserPOSTSchema } from '../models/subuserPOST';
import {
  V3SubusersIpsResponse,
  v3SubusersIpsResponseSchema,
} from '../models/v3SubusersIpsResponse';
import {
  V3SubusersReputationsResponse,
  v3SubusersReputationsResponseSchema,
} from '../models/v3SubusersReputationsResponse';
import {
  V3SubusersRequest,
  v3SubusersRequestSchema,
} from '../models/v3SubusersRequest';
import {
  V3SubusersRequest1,
  v3SubusersRequest1Schema,
} from '../models/v3SubusersRequest1';
import { array, number, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class SubusersAPIController extends BaseController {
  /**
   * **This endpoint allows you to retrieve a list of all of your subusers.**
   *
   * You can choose to retrieve specific subusers as well as limit the results that come back from the
   * API.
   *
   * @param username The username of this subuser.
   * @param limit    The number of results you would like to get in each request.
   * @param offset   The number of subusers to skip.
   * @return Response from the API call
   */
  async gETSubusers(
    username?: string,
    limit?: number,
    offset?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ListallSubusersforaparentresponse[]>> {
    const req = this.createRequest('GET', '/v3/subusers');
    const mapped = req.prepareArgs({
      username: [username, optional(string())],
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
    });
    req.query('username', mapped.username);
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    req.throwOn(401, GlobalErrorResponseSchema1Error, 'Unexpected error in API call. See HTTP response body for details.');
    return req.callAsJson(
      array(listallSubusersforaparentresponseSchema),
      requestOptions
    );
  }

  /**
   * **This endpoint allows you to create a new subuser.**
   *
   * @param body
   * @return Response from the API call
   */
  async pOSTSubusers(
    body?: V3SubusersRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SubuserPOST>> {
    const req = this.createRequest('POST', '/v3/subusers');
    const mapped = req.prepareArgs({
      body: [body, optional(v3SubusersRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, GlobalErrorResponseSchema1Error, '');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(500, ApiError, '');
    return req.callAsJson(subuserPOSTSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to enable or disable a subuser.**
   *
   * @param subuserName
   * @param body
   * @return Response from the API call
   */
  async pATCHSubusersSubuserName(
    subuserName: string,
    body?: V3SubusersRequest1,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      subuserName: [subuserName, string()],
      body: [body, optional(v3SubusersRequest1Schema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/v3/subusers/${mapped.subuserName}`;
    req.throwOn(400, GlobalErrorResponseSchema1Error, '');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(500, GlobalErrorResponseSchema1Error, '');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * **This endpoint allows you to delete a subuser.**
   *
   * This is a permanent action. Once deleted, a subuser cannot be retrieved.
   *
   * @param subuserName
   * @return Response from the API call
   */
  async dELETESubusersSubuserName(
    subuserName: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ subuserName: [subuserName, string()] });
    req.appendTemplatePath`/v3/subusers/${mapped.subuserName}`;
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * **This endpoint allows you to request the reputations for your subusers.**
   *
   * Subuser sender reputations give a good idea how well a sender is doing with regards to how
   * recipients and recipient servers react to the mail that is being received. When a bounce, spam
   * report, or other negative action happens on a sent email, it will affect your sender rating.
   *
   * @param usernames
   * @return Response from the API call
   */
  async gETSubusersReputations(
    usernames?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3SubusersReputationsResponse[]>> {
    const req = this.createRequest('GET', '/v3/subusers/reputations');
    const mapped = req.prepareArgs({
      usernames: [usernames, optional(string())],
    });
    req.query('usernames', mapped.usernames);
    return req.callAsJson(
      array(v3SubusersReputationsResponseSchema),
      requestOptions
    );
  }

  /**
   * **This endpoint allows you update your subusers' assigned IP.**
   *
   * Each subuser should be assigned to an IP address from which all of this subuser's mail will be sent.
   * Often, this is the same IP as the parent account, but each subuser can have one or more of their own
   * IP addresses as well.
   *
   * More information:
   *
   * * [How to request more IPs](https://sendgrid.com/docs/ui/account-and-settings/dedicated-ip-
   * addresses/)
   * * [Setup Reverse DNS](https://sendgrid.com/docs/ui/account-and-settings/how-to-set-up-reverse-dns/)
   *
   * @param subuserName
   * @param body
   * @return Response from the API call
   */
  async pUTSubusersSubuserNameIps(
    subuserName: string,
    body?: string[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3SubusersIpsResponse>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      subuserName: [subuserName, string()],
      body: [body, optional(array(string()))],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/v3/subusers/${mapped.subuserName}/ips`;
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    return req.callAsJson(v3SubusersIpsResponseSchema, requestOptions);
  }
}
