/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  GlobalErrorResponseSchema1Error,
} from '../errors/globalErrorResponseSchema1Error';
import { Accept1Enum, accept1EnumSchema } from '../models/accept1Enum';
import { BounceResponse, bounceResponseSchema } from '../models/bounceResponse';
import {
  Classification1Enum,
  classification1EnumSchema,
} from '../models/classification1Enum';
import {
  ContentTypeEnum,
  contentTypeEnumSchema,
} from '../models/contentTypeEnum';
import {
  V3SuppressionBouncesClassificationsResponse,
  v3SuppressionBouncesClassificationsResponseSchema,
} from '../models/v3SuppressionBouncesClassificationsResponse';
import {
  V3SuppressionBouncesClassificationsResponse1,
  v3SuppressionBouncesClassificationsResponse1Schema,
} from '../models/v3SuppressionBouncesClassificationsResponse1';
import { array, nullable, number, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class BouncesAPIController extends BaseController {
  /**
   * **This endpoint allows you to retrieve all of your bounces. A maximum of 500 bounces will be
   * returned per query. You can use the `offset` and `limit` parameters to retrieve more or less than
   * 500 results.**
   *
   * @param accept
   * @param startTime    Refers start of the time range in unix timestamp when a bounce was created
   *                               (inclusive).
   * @param endTime      Refers end of the time range in unix timestamp when a bounce was created
   *                               (inclusive).
   * @param limit        Limit the number of results to be displayed per page.
   * @param offset       The point in the list to begin displaying results. To retrieve more than 500
   *                               results, you can make multiple requests to the API, using the `offset` to begin at
   *                               the next result in the list.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETSuppressionBounces(
    accept: string,
    startTime?: number,
    endTime?: number,
    limit?: number,
    offset?: number,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<BounceResponse[]>> {
    const req = this.createRequest('GET', '/v3/suppression/bounces');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      startTime: [startTime, optional(number())],
      endTime: [endTime, optional(number())],
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('Accept', mapped.accept);
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.query('start_time', mapped.startTime);
    req.query('end_time', mapped.endTime);
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    return req.callAsJson(array(bounceResponseSchema), requestOptions);
  }

  /**
   * **This endpoint allows you to delete all emails on your bounces list.**
   *
   * There are two options for deleting bounced emails:
   *
   * 1. You can delete all bounced emails by setting `delete_all` to `true` in the request body.
   * 2. You can delete a selection of bounced emails by specifying the email addresses in the `emails`
   * array of the request body.
   *
   * **WARNING:** You can not have both `emails` and `delete_all` set.
   *
   * @param contentType
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if
   *                                        the subuser account was making the call.
   * @return Response from the API call
   */
  async dELETESuppressionBounces(
    contentType: ContentTypeEnum,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE', '/v3/suppression/bounces');
    const mapped = req.prepareArgs({
      contentType: [contentType, contentTypeEnumSchema],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('Content-Type', mapped.contentType);
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    return req.callAsJson(nullable(unknown()), requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve a specific bounce by email address.**
   *
   * @param email
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETSuppressionBouncesEmail(
    email: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<BounceResponse[]>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      email: [email, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/suppression/bounces/${mapped.email}`;
    return req.callAsJson(array(bounceResponseSchema), requestOptions);
  }

  /**
   * **This endpoint allows you to remove an email address from your bounce list.**
   *
   * @param email
   * @param emailAddress  The email address you would like to remove from the bounce list.
   * @param contentType
   * @param onBehalfOf    Example: The subuser's username. This header generates the API call as if
   *                                         the subuser account was making the call.
   * @return Response from the API call
   */
  async dELETESuppressionBouncesEmail(
    email: string,
    emailAddress: string,
    contentType: ContentTypeEnum,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      email: [email, string()],
      emailAddress: [emailAddress, string()],
      contentType: [contentType, contentTypeEnumSchema],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('Content-Type', mapped.contentType);
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.query('email_address', mapped.emailAddress);
    req.appendTemplatePath`/v3/suppression/bounces/${mapped.email}`;
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * This endpoint will return the total number of bounces by classification in descending order for each
   * day. You can retrieve the bounce classification totals in CSV format by specifying `"text/csv"` in
   * the Accept header.
   *
   * @param accept       Specifies the content type to be returned by this endpoint. You can choose to
   *                                    receive CSV-formatted data by passing "text/csv" in the header.
   * @param startDate    The start of the time range, in YYYY-MM-DD format, when a bounce was created
   *                                    (inclusive).
   * @param endDate      The end of the time range, in YYYY-MM-DD format, when a bounce was created
   *                                    (inclusive).
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                                    subuser account was making the call.
   * @return Response from the API call
   */
  async gETSuppressionBouncesClassifications(
    accept: Accept1Enum,
    startDate?: string,
    endDate?: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3SuppressionBouncesClassificationsResponse>> {
    const req = this.createRequest(
      'GET',
      '/v3/suppression/bounces/classifications'
    );
    const mapped = req.prepareArgs({
      accept: [accept, accept1EnumSchema],
      startDate: [startDate, optional(string())],
      endDate: [endDate, optional(string())],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('Accept', mapped.accept);
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.query('start_date', mapped.startDate);
    req.query('end_date', mapped.endDate);
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    return req.callAsJson(
      v3SuppressionBouncesClassificationsResponseSchema,
      requestOptions
    );
  }

  /**
   * This endpoint will return the number of bounces for the classification specified in descending order
   * for each day. You can retrieve the bounce classification totals in CSV format by specifying
   * `"text/csv"` in the Accept header.
   *
   * @param accept         Specifies the content type to be returned by this endpoint. You can
   *                                              choose to receive CSV-formatted data by passing "text/csv" in the
   *                                              header.
   * @param classification The classification you want to filter by. Possible values are:
   *                                              `Content`, `Frequency or Volume Too High`, `Invalid Address`,
   *                                              `Mailbox Unavailable`, `Reputation`, `Technical Failure`,
   *                                              `Unclassified`.
   * @param startDate      The start of the time range, in YYYY-MM-DD format, when a bounce was
   *                                              created (inclusive).
   * @param endDate        The end of the time range, in YYYY-MM-DD format, when a bounce was
   *                                              created (inclusive).
   * @param onBehalfOf     Example: The subuser's username. This header generates the API call
   *                                              as if the subuser account was making the call.
   * @return Response from the API call
   */
  async gETSuppressionsBouncesClassificationsClassification(
    accept: Accept1Enum,
    classification: Classification1Enum,
    startDate?: string,
    endDate?: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3SuppressionBouncesClassificationsResponse1>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      accept: [accept, accept1EnumSchema],
      classification: [classification, classification1EnumSchema],
      startDate: [startDate, optional(string())],
      endDate: [endDate, optional(string())],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('Accept', mapped.accept);
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.query('start_date', mapped.startDate);
    req.query('end_date', mapped.endDate);
    req.appendTemplatePath`/v3/suppression/bounces/classifications/${mapped.classification}`;
    return req.callAsJson(
      v3SuppressionBouncesClassificationsResponse1Schema,
      requestOptions
    );
  }
}
