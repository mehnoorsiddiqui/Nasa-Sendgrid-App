/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  SettingsClickTracking,
  settingsClickTrackingSchema,
} from '../models/settingsClickTracking';
import {
  SettingsGoogleAnalytics,
  settingsGoogleAnalyticsSchema,
} from '../models/settingsGoogleAnalytics';
import {
  SettingsSubscriptionTracking,
  settingsSubscriptionTrackingSchema,
} from '../models/settingsSubscriptionTracking';
import {
  V3TrackingSettingsClickRequest,
  v3TrackingSettingsClickRequestSchema,
} from '../models/v3TrackingSettingsClickRequest';
import {
  V3TrackingSettingsOpenRequest,
  v3TrackingSettingsOpenRequestSchema,
} from '../models/v3TrackingSettingsOpenRequest';
import {
  V3TrackingSettingsOpenResponse,
  v3TrackingSettingsOpenResponseSchema,
} from '../models/v3TrackingSettingsOpenResponse';
import {
  V3TrackingSettingsResponse,
  v3TrackingSettingsResponseSchema,
} from '../models/v3TrackingSettingsResponse';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class SettingsTrackingController extends BaseController {
  /**
   * **This endpoint allows you to retrieve a list of all tracking settings on your account.**
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETTrackingSettings(
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3TrackingSettingsResponse>> {
    const req = this.createRequest('GET', '/v3/tracking_settings');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    return req.callAsJson(v3TrackingSettingsResponseSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve your current click tracking setting.**
   *
   * Click Tracking overrides all the links and URLs in your emails and points them to either SendGrid’s
   * servers or the domain with which you branded your link. When a customer clicks a link, SendGrid
   * tracks those [clicks](https://sendgrid.com/docs/glossary/clicks/).
   *
   * Click tracking helps you understand how users are engaging with your communications. SendGrid can
   * track up to 1000 links per email
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETTrackingSettingsClick(
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SettingsClickTracking>> {
    const req = this.createRequest('GET', '/v3/tracking_settings/click');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    return req.callAsJson(settingsClickTrackingSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to enable or disable your current click tracking setting.**
   *
   * Click Tracking overrides all the links and URLs in your emails and points them to either SendGrid’s
   * servers or the domain with which you branded your link. When a customer clicks a link, SendGrid
   * tracks those [clicks](https://sendgrid.com/docs/glossary/clicks/).
   *
   * Click tracking helps you understand how users are engaging with your communications. SendGrid can
   * track up to 1000 links per email
   *
   * @param onBehalfOf   Example: The subuser's username. This header
   *                                                              generates the API call as if the subuser account was
   *                                                              making the call.
   * @param body
   * @return Response from the API call
   */
  async pATCHTrackingSettingsClick(
    onBehalfOf?: string,
    body?: V3TrackingSettingsClickRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SettingsClickTracking>> {
    const req = this.createRequest('PATCH', '/v3/tracking_settings/click');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(v3TrackingSettingsClickRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    return req.callAsJson(settingsClickTrackingSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve your current setting for Google Analytics.**
   *
   *
   * Google Analytics helps you understand how users got to your site and what they're doing there. For
   * more information about using Google Analytics, please refer to [Google’s URL Builder](https:
   * //support.google.com/analytics/answer/1033867?hl=en) and their article on ["Best Practices for
   * Campaign Building"](https://support.google.com/analytics/answer/1037445).
   *
   * We default the settings to Google’s recommendations. For more information, see [Google Analytics
   * Demystified](https://sendgrid.com/docs/ui/analytics-and-reporting/google-analytics/).
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETTrackingSettingsGoogleAnalytics(
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SettingsGoogleAnalytics>> {
    const req = this.createRequest(
      'GET',
      '/v3/tracking_settings/google_analytics'
    );
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    return req.callAsJson(settingsGoogleAnalyticsSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to update your current setting for Google Analytics.**
   *
   * Google Analytics helps you understand how users got to your site and what they're doing there. For
   * more information about using Google Analytics, please refer to [Google’s URL Builder](https:
   * //support.google.com/analytics/answer/1033867?hl=en) and their article on ["Best Practices for
   * Campaign Building"](https://support.google.com/analytics/answer/1037445).
   *
   * We default the settings to Google’s recommendations. For more information, see [Google Analytics
   * Demystified](https://sendgrid.com/docs/ui/analytics-and-reporting/google-analytics/).
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the
   *                                                       API call as if the subuser account was making the call.
   * @param body
   * @return Response from the API call
   */
  async pATCHTrackingSettingsGoogleAnalytics(
    onBehalfOf?: string,
    body?: SettingsGoogleAnalytics,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SettingsGoogleAnalytics>> {
    const req = this.createRequest(
      'PATCH',
      '/v3/tracking_settings/google_analytics'
    );
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(settingsGoogleAnalyticsSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    return req.callAsJson(settingsGoogleAnalyticsSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve your current settings for open tracking.**
   *
   * Open Tracking adds an invisible image at the end of the email which can track email opens.
   *
   * If the email recipient has images enabled on their email client, a request to SendGrid’s server for
   * the invisible image is executed and an open event is logged.
   *
   * These events are logged in the Statistics portal, Email Activity interface, and are reported by the
   * Event Webhook.
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETTrackingSettingsOpen(
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3TrackingSettingsOpenResponse>> {
    const req = this.createRequest('GET', '/v3/tracking_settings/open');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    return req.callAsJson(v3TrackingSettingsOpenResponseSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to update your current settings for open tracking.**
   *
   * Open Tracking adds an invisible image at the end of the email which can track email opens.
   *
   * If the email recipient has images enabled on their email client, a request to SendGrid’s server for
   * the invisible image is executed and an open event is logged.
   *
   * These events are logged in the Statistics portal, Email Activity interface, and are reported by the
   * Event Webhook.
   *
   * @param onBehalfOf   Example: The subuser's username. This header
   *                                                             generates the API call as if the subuser account was
   *                                                             making the call.
   * @param body
   * @return Response from the API call
   */
  async pATCHTrackingSettingsOpen(
    onBehalfOf?: string,
    body?: V3TrackingSettingsOpenRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3TrackingSettingsOpenResponse>> {
    const req = this.createRequest('PATCH', '/v3/tracking_settings/open');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(v3TrackingSettingsOpenRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    return req.callAsJson(v3TrackingSettingsOpenResponseSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve your current settings for subscription tracking.**
   *
   * Subscription tracking adds links to the bottom of your emails that allows your recipients to
   * subscribe to, or unsubscribe from, your emails.
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETTrackingSettingsSubscription(
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SettingsSubscriptionTracking>> {
    const req = this.createRequest('GET', '/v3/tracking_settings/subscription');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    return req.callAsJson(settingsSubscriptionTrackingSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to update your current settings for subscription tracking.**
   *
   * Subscription tracking adds links to the bottom of your emails that allows your recipients to
   * subscribe to, or unsubscribe from, your emails.
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates
   *                                                            the API call as if the subuser account was making the
   *                                                            call.
   * @param body
   * @return Response from the API call
   */
  async pATCHTrackingSettingsSubscription(
    onBehalfOf?: string,
    body?: SettingsSubscriptionTracking,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SettingsSubscriptionTracking>> {
    const req = this.createRequest(
      'PATCH',
      '/v3/tracking_settings/subscription'
    );
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(settingsSubscriptionTrackingSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    return req.callAsJson(settingsSubscriptionTrackingSchema, requestOptions);
  }
}
