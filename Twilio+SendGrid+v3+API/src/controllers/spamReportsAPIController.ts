/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  ContentTypeEnum,
  contentTypeEnumSchema,
} from '../models/contentTypeEnum';
import {
  SpamReportsResponse,
  spamReportsResponseSchema,
} from '../models/spamReportsResponse';
import { array, number, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class SpamReportsAPIController extends BaseController {
  /**
   * **This endpoint allows you to retrieve all spam reports.**
   *
   * @param startTime    The start of the time range when a spam report was created (inclusive). This is a
   *                               unix timestamp.
   * @param endTime      The end of the time range when a spam report was created (inclusive). This is a
   *                               unix timestamp.
   * @param limit        Limit the number of results to be displayed per page.
   * @param offset       Paging offset. The point in the list to begin displaying results.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETSuppressionSpamReports(
    startTime?: number,
    endTime?: number,
    limit?: number,
    offset?: number,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SpamReportsResponse[]>> {
    const req = this.createRequest('GET', '/v3/suppression/spam_reports');
    const mapped = req.prepareArgs({
      startTime: [startTime, optional(number())],
      endTime: [endTime, optional(number())],
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.query('start_time', mapped.startTime);
    req.query('end_time', mapped.endTime);
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    return req.callAsJson(array(spamReportsResponseSchema), requestOptions);
  }

  /**
   * **This endpoint allows you to delete your spam reports.**
   *
   * Deleting a spam report will remove the suppression, meaning email will once again be sent to the
   * previously suppressed address. This should be avoided unless a recipient indicates they wish to
   * receive email from you again. You can use our [bypass filters](https://sendgrid.com/docs/ui/sending-
   * email/index-suppressions/#bypass-suppressions) to deliver messages to otherwise suppressed addresses
   * when exceptions are required.
   *
   * There are two options for deleting spam reports:
   *
   * 1. You can delete all spam reports by setting the `delete_all` field to `true` in the request body.
   * 2. You can delete a list of select spam reports by specifying the email addresses in the `emails`
   * array of the request body.
   *
   * @param contentType
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if
   *                                        the subuser account was making the call.
   * @return Response from the API call
   */
  async dELETESuppressionSpamReports(
    contentType: ContentTypeEnum,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE', '/v3/suppression/spam_reports');
    const mapped = req.prepareArgs({
      contentType: [contentType, contentTypeEnumSchema],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('Content-Type', mapped.contentType);
    req.header('on-behalf-of', mapped.onBehalfOf);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve a specific spam report by email address.**
   *
   * @param email        The email address of a specific spam report that you want to retrieve.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETSuppressionSpamReportsEmail(
    email: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SpamReportsResponse[]>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      email: [email, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/suppression/spam_reports/${mapped.email}`;
    return req.callAsJson(array(spamReportsResponseSchema), requestOptions);
  }

  /**
   * **This endpoint allows you to delete a specific spam report by email address.**
   *
   * Deleting a spam report will remove the suppression, meaning email will once again be sent to the
   * previously suppressed address. This should be avoided unless a recipient indicates they wish to
   * receive email from you again. You can use our [bypass filters](https://sendgrid.com/docs/ui/sending-
   * email/index-suppressions/#bypass-suppressions) to deliver messages to otherwise suppressed addresses
   * when exceptions are required.
   *
   * @param email        The email address of a specific spam report that you want to retrieve.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async dELETESuppressionSpamReportsEmail(
    email: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      email: [email, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/suppression/spam_reports/${mapped.email}`;
    return req.callAsJson(unknown(), requestOptions);
  }
}
