/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  GlobalErrorResponseSchema1Error,
} from '../errors/globalErrorResponseSchema1Error';
import {
  GETUserAccountresponse,
  gETUserAccountresponseSchema,
} from '../models/gETUserAccountresponse';
import {
  GETUserProfileresponse,
  gETUserProfileresponseSchema,
} from '../models/gETUserProfileresponse';
import { UserProfile, userProfileSchema } from '../models/userProfile';
import {
  V3UserCreditsResponse,
  v3UserCreditsResponseSchema,
} from '../models/v3UserCreditsResponse';
import {
  V3UserEmailRequest,
  v3UserEmailRequestSchema,
} from '../models/v3UserEmailRequest';
import {
  V3UserEmailResponse,
  v3UserEmailResponseSchema,
} from '../models/v3UserEmailResponse';
import {
  V3UserEmailResponse1,
  v3UserEmailResponse1Schema,
} from '../models/v3UserEmailResponse1';
import {
  V3UserPasswordRequest,
  v3UserPasswordRequestSchema,
} from '../models/v3UserPasswordRequest';
import {
  V3UserUsernameRequest,
  v3UserUsernameRequestSchema,
} from '../models/v3UserUsernameRequest';
import {
  V3UserUsernameResponse,
  v3UserUsernameResponseSchema,
} from '../models/v3UserUsernameResponse';
import {
  V3UserUsernameResponse1,
  v3UserUsernameResponse1Schema,
} from '../models/v3UserUsernameResponse1';
import { optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class UsersAPIController extends BaseController {
  /**
   * Get a user's profile
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETUserProfile(
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GETUserProfileresponse>> {
    const req = this.createRequest('GET', '/v3/user/profile');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    return req.callAsJson(gETUserProfileresponseSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to update your current profile details.**
   *
   * Any one or more of the parameters can be updated via the PATCH `/user/profile` endpoint. You must
   * include at least one when you PATCH.
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as
   *                                           if the subuser account was making the call.
   * @param body
   * @return Response from the API call
   */
  async pATCHUserProfile(
    onBehalfOf?: string,
    body?: UserProfile,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UserProfile>> {
    const req = this.createRequest('PATCH', '/v3/user/profile');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(userProfileSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    return req.callAsJson(userProfileSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve your user account details.**
   *
   * Your user's account information includes the user's account type and reputation.
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETUserAccount(
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GETUserAccountresponse>> {
    const req = this.createRequest('GET', '/v3/user/account');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    return req.callAsJson(gETUserAccountresponseSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve the email address currently on file for your account.**
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETUserEmail(
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3UserEmailResponse>> {
    const req = this.createRequest('GET', '/v3/user/email');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    return req.callAsJson(v3UserEmailResponseSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to update the email address currently on file for your account.**
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the API
   *                                                  call as if the subuser account was making the call.
   * @param body
   * @return Response from the API call
   */
  async pUTUserEmail(
    onBehalfOf?: string,
    body?: V3UserEmailRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3UserEmailResponse1>> {
    const req = this.createRequest('PUT', '/v3/user/email');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(v3UserEmailRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    return req.callAsJson(v3UserEmailResponse1Schema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve your current account username.**
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETUserUsername(
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3UserUsernameResponse>> {
    const req = this.createRequest('GET', '/v3/user/username');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    return req.callAsJson(v3UserUsernameResponseSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to update the username for your account.**
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the
   *                                                     API call as if the subuser account was making the call.
   * @param body
   * @return Response from the API call
   */
  async pUTUserUsername(
    onBehalfOf?: string,
    body?: V3UserUsernameRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3UserUsernameResponse1>> {
    const req = this.createRequest('PUT', '/v3/user/username');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(v3UserUsernameRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    return req.callAsJson(v3UserUsernameResponse1Schema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve the current credit balance for your account.**
   *
   * Each account has a credit balance, which is a base number of emails it can send before receiving per-
   * email charges. For more information about credits and billing, see [Billing and Plan details
   * information](https://sendgrid.com/docs/ui/account-and-settings/billing/).
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETUserCredits(
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3UserCreditsResponse>> {
    const req = this.createRequest('GET', '/v3/user/credits');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    return req.callAsJson(v3UserCreditsResponseSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to update your password.**
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the
   *                                                     API call as if the subuser account was making the call.
   * @param body
   * @return Response from the API call
   */
  async pUTUserPassword(
    onBehalfOf?: string,
    body?: V3UserPasswordRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('PUT', '/v3/user/password');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(v3UserPasswordRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    return req.callAsJson(unknown(), requestOptions);
  }
}
