/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { V3IpsWarmup404Error } from '../errors/v3IpsWarmup404Error';
import { V3IpsWarmup404Error3Error } from '../errors/v3IpsWarmup404Error3Error';
import { V3IpsWarmup404Error4Error } from '../errors/v3IpsWarmup404Error4Error';
import { IPWarmupIP, iPWarmupIPSchema } from '../models/iPWarmupIP';
import {
  V3IpsWarmupRequest,
  v3IpsWarmupRequestSchema,
} from '../models/v3IpsWarmupRequest';
import { array, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class IPWarmupController extends BaseController {
  /**
   * **This endpoint allows you to put an IP address into warmup mode.**
   *
   * @param body
   * @return Response from the API call
   */
  async pOSTIpsWarmup(
    body?: V3IpsWarmupRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<IPWarmupIP[]>> {
    const req = this.createRequest('POST', '/v3/ips/warmup');
    const mapped = req.prepareArgs({
      body: [body, optional(v3IpsWarmupRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(404, V3IpsWarmup404Error, '');
    return req.callAsJson(array(iPWarmupIPSchema), requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve all of your IP addresses that are currently warming up.**
   *
   * @return Response from the API call
   */
  async gETIpsWarmup(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<IPWarmupIP[]>> {
    const req = this.createRequest('GET', '/v3/ips/warmup');
    return req.callAsJson(array(iPWarmupIPSchema), requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve the warmup status for a specific IP address.**
   *
   * You can retrieve all of your warming IPs using the "Retrieve all IPs currently in warmup" endpoint.
   *
   * @param ipAddress  The IP address that you want to retrieve the warmup status for.
   * @return Response from the API call
   */
  async gETIpsWarmupIpAddress(
    ipAddress: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<IPWarmupIP[]>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ ipAddress: [ipAddress, string()] });
    req.appendTemplatePath`/v3/ips/warmup/${mapped.ipAddress}`;
    req.throwOn(404, V3IpsWarmup404Error3Error, '');
    return req.callAsJson(array(iPWarmupIPSchema), requestOptions);
  }

  /**
   * **This endpoint allows you to remove an IP address from warmup mode.**
   *
   * Your request will return a 204 status code if the specified IP was successfully removed from warmup
   * mode. To retrieve details of the IPâ€™s warmup status *before* removing it from warmup mode, call the
   * "Retrieve the warmpup status for a specific IP address" endpoint.
   *
   * @param ipAddress  The IP address that you want to retrieve the warmup status for.
   * @return Response from the API call
   */
  async dELETEIpsWarmupIpAddress(
    ipAddress: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ ipAddress: [ipAddress, string()] });
    req.appendTemplatePath`/v3/ips/warmup/${mapped.ipAddress}`;
    req.throwOn(404, V3IpsWarmup404Error4Error, '');
    return req.callAsJson(unknown(), requestOptions);
  }
}
