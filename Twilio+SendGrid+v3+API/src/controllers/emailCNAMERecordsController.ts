/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  V3WhitelabelDnsEmail400Error1Error,
} from '../errors/v3WhitelabelDnsEmail400Error1Error';
import {
  V3WhitelabelDnsEmailRequest,
  v3WhitelabelDnsEmailRequestSchema,
} from '../models/v3WhitelabelDnsEmailRequest';
import { optional } from '../schema';
import { BaseController } from './baseController';

export class EmailCNAMERecordsController extends BaseController {
  /**
   * **This endpoint is used to share DNS records with a colleagues**
   *
   * Use this endpoint to send SendGrid-generated DNS record information to a co-worker so they can enter
   * it into your DNS provider to validate your domain and link branding.
   *
   * What type of records are sent will depend on whether you have chosen Automated Security or not. When
   * using Automated Security, SendGrid provides you with three CNAME records. If you turn Automated
   * Security off, you are instead given TXT and MX records.
   *
   * If you pass a `link_id` to this endpoint, the generated email will supply the DNS records necessary
   * to complete [Link Branding](https://sendgrid.com/docs/ui/account-and-settings/how-to-set-up-link-
   * branding/) setup. If you pass a `domain_id` to this endpoint, the generated email will supply the
   * DNS records needed to complete [Domain Authentication](https://sendgrid.com/docs/ui/account-and-
   * settings/how-to-set-up-domain-authentication/). Passing both IDs will generate an email with the
   * records needed to complete both setup steps.
   *
   * You can retrieve all your domain IDs from the returned `id` fields for each domain using the "List
   * all authenticated domains" endpoint. You can retrieve all of your link IDs using the "Retrieve all
   * branded links" endpoint.
   *
   * @param body
   * @return Response from the API call
   */
  async pOSTWhitelabelDnsEmail(
    body?: V3WhitelabelDnsEmailRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/v3/whitelabel/dns/email');
    const mapped = req.prepareArgs({
      body: [body, optional(v3WhitelabelDnsEmailRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, V3WhitelabelDnsEmail400Error1Error, '');
    return req.call(requestOptions);
  }
}
