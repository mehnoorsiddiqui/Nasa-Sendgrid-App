/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { SSOErrorResponse1Error } from '../errors/sSOErrorResponse1Error';
import {
  SingleSignOnTeammateRequest,
  singleSignOnTeammateRequestSchema,
} from '../models/singleSignOnTeammateRequest';
import {
  SingleSignOnTeammateResponse,
  singleSignOnTeammateResponseSchema,
} from '../models/singleSignOnTeammateResponse';
import {
  SingleSignOnTeammatesPATCHResponse,
  singleSignOnTeammatesPATCHResponseSchema,
} from '../models/singleSignOnTeammatesPATCHResponse';
import {
  V3SsoTeammatesRequest,
  v3SsoTeammatesRequestSchema,
} from '../models/v3SsoTeammatesRequest';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class SingleSignOnTeammatesController extends BaseController {
  /**
   * **This endpoint allows you to create an SSO Teammate.**
   *
   * The email provided for this user will also function as the Teammate’s username.
   *
   * @param body
   * @return Response from the API call
   */
  async pOSTSsoTeammates(
    body?: SingleSignOnTeammateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SingleSignOnTeammateResponse>> {
    const req = this.createRequest('POST', '/v3/sso/teammates');
    const mapped = req.prepareArgs({
      body: [body, optional(singleSignOnTeammateRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, SSOErrorResponse1Error, '');
    req.throwOn(401, SSOErrorResponse1Error, '');
    req.throwOn(403, SSOErrorResponse1Error, '');
    req.throwOn(429, SSOErrorResponse1Error, '');
    req.throwOn(500, SSOErrorResponse1Error, '');
    return req.callAsJson(singleSignOnTeammateResponseSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to modify an existing SSO Teammate.**
   *
   * To turn a teammate into an admin, the request body should contain the `is_admin` field set to `true`.
   * Otherwise, set `is_admin` to false and pass in all the scopes that a teammate should have.
   *
   * Only the parent user and Teammates with admin permissions can update another Teammate’s permissions.
   * Admin users can only update permissions.
   *
   * @param username     This email address must be the same address assigned to the
   *                                                     teammate in your IdP
   * @param body
   * @return Response from the API call
   */
  async pATCHSsoTeammatesUsername(
    username: string,
    body?: V3SsoTeammatesRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SingleSignOnTeammatesPATCHResponse>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      username: [username, string()],
      body: [body, optional(v3SsoTeammatesRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/v3/sso/teammates/${mapped.username}`;
    req.throwOn(400, SSOErrorResponse1Error, '');
    req.throwOn(401, SSOErrorResponse1Error, '');
    req.throwOn(403, SSOErrorResponse1Error, '');
    req.throwOn(429, SSOErrorResponse1Error, '');
    req.throwOn(500, SSOErrorResponse1Error, '');
    return req.callAsJson(
      singleSignOnTeammatesPATCHResponseSchema,
      requestOptions
    );
  }
}
