/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  GlobalErrorResponseSchema1Error,
} from '../errors/globalErrorResponseSchema1Error';
import {
  Createmonitorsettingsrequest,
  createmonitorsettingsrequestSchema,
} from '../models/createmonitorsettingsrequest';
import { optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class SubuserMonitorSettingsController extends BaseController {
  /**
   * Retrieve monitor settings for a subuser
   *
   * @param subuserName  The name of the subuser for which to retrieve monitor settings.
   * @return Response from the API call
   */
  async gETSubusersSubuserNameMonitor(
    subuserName: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Createmonitorsettingsrequest>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ subuserName: [subuserName, string()] });
    req.appendTemplatePath`/v3/subusers/${mapped.subuserName}/monitor`;
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '');
    return req.callAsJson(createmonitorsettingsrequestSchema, requestOptions);
  }

  /**
   * Create monitor settings
   *
   * @param subuserName  The name of the subuser for which to retrieve monitor
   *                                                            settings.
   * @param body
   * @return Response from the API call
   */
  async pOSTSubusersSubuserNameMonitor(
    subuserName: string,
    body?: Createmonitorsettingsrequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Createmonitorsettingsrequest>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      subuserName: [subuserName, string()],
      body: [body, optional(createmonitorsettingsrequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/v3/subusers/${mapped.subuserName}/monitor`;
    req.throwOn(400, GlobalErrorResponseSchema1Error, '');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    return req.callAsJson(createmonitorsettingsrequestSchema, requestOptions);
  }

  /**
   * Update Monitor Settings for a subuser
   *
   * @param subuserName  The name of the subuser for which to retrieve monitor
   *                                                            settings.
   * @param body
   * @return Response from the API call
   */
  async pUTSubusersSubuserNameMonitor(
    subuserName: string,
    body?: Createmonitorsettingsrequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Createmonitorsettingsrequest>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      subuserName: [subuserName, string()],
      body: [body, optional(createmonitorsettingsrequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/v3/subusers/${mapped.subuserName}/monitor`;
    req.throwOn(400, GlobalErrorResponseSchema1Error, '');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    return req.callAsJson(createmonitorsettingsrequestSchema, requestOptions);
  }

  /**
   * Delete monitor settings
   *
   * @param subuserName  The name of the subuser for which to retrieve monitor settings.
   * @return Response from the API call
   */
  async dELETESubusersSubuserNameMonitor(
    subuserName: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ subuserName: [subuserName, string()] });
    req.appendTemplatePath`/v3/subusers/${mapped.subuserName}/monitor`;
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '');
    return req.callAsJson(unknown(), requestOptions);
  }
}
