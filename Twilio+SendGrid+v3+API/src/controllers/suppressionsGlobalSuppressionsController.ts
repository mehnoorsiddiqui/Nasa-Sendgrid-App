/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  RetrieveaGlobalSuppressionresponse,
  retrieveaGlobalSuppressionresponseSchema,
} from '../models/retrieveaGlobalSuppressionresponse';
import {
  SuppressionsRequestBody,
  suppressionsRequestBodySchema,
} from '../models/suppressionsRequestBody';
import {
  V3AsmSuppressionsGlobalResponse,
  v3AsmSuppressionsGlobalResponseSchema,
} from '../models/v3AsmSuppressionsGlobalResponse';
import {
  V3SuppressionUnsubscribesResponse,
  v3SuppressionUnsubscribesResponseSchema,
} from '../models/v3SuppressionUnsubscribesResponse';
import { array, number, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class SuppressionsGlobalSuppressionsController extends BaseController {
  /**
   * **This endpoint allows you to add one or more email addresses to the global suppressions group.**
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the
   *                                                       API call as if the subuser account was making the call.
   * @param body
   * @return Response from the API call
   */
  async pOSTAsmSuppressionsGlobal(
    onBehalfOf?: string,
    body?: SuppressionsRequestBody,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3AsmSuppressionsGlobalResponse>> {
    const req = this.createRequest('POST', '/v3/asm/suppressions/global');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(suppressionsRequestBodySchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    return req.callAsJson(
      v3AsmSuppressionsGlobalResponseSchema,
      requestOptions
    );
  }

  /**
   * **This endpoint allows you to retrieve a list of all email address that are globally suppressed.**
   *
   * @param startTime    Refers start of the time range in unix timestamp when an unsubscribe email was
   *                               created (inclusive).
   * @param endTime      Refers end of the time range in unix timestamp when an unsubscribe email was
   *                               created (inclusive).
   * @param limit        The number of results to display on each page.
   * @param offset       The point in the list of results to begin displaying global suppressions.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETSuppressionUnsubscribes(
    startTime?: number,
    endTime?: number,
    limit?: number,
    offset?: number,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3SuppressionUnsubscribesResponse[]>> {
    const req = this.createRequest('GET', '/v3/suppression/unsubscribes');
    const mapped = req.prepareArgs({
      startTime: [startTime, optional(number())],
      endTime: [endTime, optional(number())],
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.query('start_time', mapped.startTime);
    req.query('end_time', mapped.endTime);
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    return req.callAsJson(
      array(v3SuppressionUnsubscribesResponseSchema),
      requestOptions
    );
  }

  /**
   * **This endpoint allows you to retrieve a global suppression. You can also use this endpoint to
   * confirm if an email address is already globally suppresed.**
   *
   * If the email address you include in the URL path parameter `{email}` is already globally suppressed,
   * the response will include that email address. If the address you enter for `{email}` is not globally
   * suppressed, an empty JSON object `{}` will be returned.
   *
   * @param email        The email address of the global suppression you want to retrieve. Or, if you want
   *                               to check if an email address is on the global suppressions list, enter that email
   *                               address here.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETAsmSuppressionsGlobalEmail(
    email: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<RetrieveaGlobalSuppressionresponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      email: [email, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/asm/suppressions/global/${mapped.email}`;
    return req.callAsJson(
      retrieveaGlobalSuppressionresponseSchema,
      requestOptions
    );
  }

  /**
   * **This endpoint allows you to remove an email address from the global suppressions group.**
   *
   * Deleting a suppression group will remove the suppression, meaning email will once again be sent to
   * the previously suppressed addresses. This should be avoided unless a recipient indicates they wish
   * to receive email from you again. You can use our [bypass filters](https://sendgrid.
   * com/docs/ui/sending-email/index-suppressions/#bypass-suppressions) to deliver messages to otherwise
   * suppressed addresses when exceptions are required.
   *
   * @param email        The email address of the global suppression you want to retrieve. Or, if you want
   *                               to check if an email address is on the global suppressions list, enter that email
   *                               address here.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async dELETEAsmSuppressionsGlobalEmail(
    email: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      email: [email, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/asm/suppressions/global/${mapped.email}`;
    return req.callAsJson(unknown(), requestOptions);
  }
}
