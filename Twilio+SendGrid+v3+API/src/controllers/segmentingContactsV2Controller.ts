/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import {
  V3MarketingSegments20400Error,
} from '../errors/v3MarketingSegments20400Error';
import {
  V3MarketingSegments20500Error,
} from '../errors/v3MarketingSegments20500Error';
import {
  AllSegmentsResponse,
  allSegmentsResponseSchema,
} from '../models/allSegmentsResponse';
import {
  SegmentResponse,
  segmentResponseSchema,
} from '../models/segmentResponse';
import { SegmentUpdate, segmentUpdateSchema } from '../models/segmentUpdate';
import { SegmentWrite, segmentWriteSchema } from '../models/segmentWrite';
import { array, boolean, optional, string } from '../schema';
import { BaseController } from './baseController';

export class SegmentingContactsV2Controller extends BaseController {
  /**
   * Segment `name` has to be unique. A user can not create a new segment with an existing segment name.
   *
   * @param body
   * @return Response from the API call
   */
  async pOSTSegments(
    body?: SegmentWrite,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SegmentResponse>> {
    const req = this.createRequest('POST', '/v3/marketing/segments/2.0');
    const mapped = req.prepareArgs({
      body: [body, optional(segmentWriteSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, V3MarketingSegments20400Error, '');
    req.throwOn(404, ApiError, '');
    req.throwOn(429, ApiError, '');
    req.throwOn(500, V3MarketingSegments20500Error, '');
    return req.callAsJson(segmentResponseSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve a list of segments.**
   *
   * The query param `parent_list_ids` is treated as a filter.  Any match will be returned.  Zero matches
   * will return a response code of 200 with an empty `results` array.
   *
   * `parent_list_ids` | `no_parent_list_id` | `ids` | `result`
   * -----------------:|:--------------------:|:-------------:|:-------------:
   * empty | false | empty | all segments values
   * list_ids | false | empty | segments filtered by list_ids values
   * list_ids |true | empty | segments filtered by list_ids and segments with no parent list_ids empty
   * empty | true | empty | segments with no parent list_ids
   * anything | anything | ids | segments with matching segment ids |
   *
   * @param ids               A list of segment IDs to retrieve. When this parameter is included, the
   *                                      `no_parent_list_ids` and `parent_list_ids` parameters are ignored and only
   *                                      segments with given IDs are returned.
   * @param parentListIds     A comma separated list up to 50 in size, to filter segments on.  Only
   *                                      segments that have any of these list ids as the parent list will be retrieved.
   *                                      This is different from the parameter of the same name used when creating a
   *                                      segment.
   * @param noParentListId    If set to `true`, segments with an empty value of `parent_list_id` will be
   *                                      returned in the filter.  If the value is not present, it defaults to 'false'.
   * @return Response from the API call
   */
  async gETSegments(
    ids?: string[],
    parentListIds?: string,
    noParentListId?: boolean,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AllSegmentsResponse>> {
    const req = this.createRequest('GET', '/v3/marketing/segments/2.0');
    const mapped = req.prepareArgs({
      ids: [ids, optional(array(string()))],
      parentListIds: [parentListIds, optional(string())],
      noParentListId: [noParentListId, optional(boolean())],
    });
    req.query('ids', mapped.ids);
    req.query('parent_list_ids', mapped.parentListIds);
    req.query('no_parent_list_id', mapped.noParentListId);
    req.throwOn(400, V3MarketingSegments20400Error, '401 error');
    req.throwOn(404, ApiError, '404 error');
    req.throwOn(500, V3MarketingSegments20500Error, '500 error');
    return req.callAsJson(allSegmentsResponseSchema, requestOptions);
  }

  /**
   * Segment `name` has to be unique. A user can not create a new segment with an existing segment name.
   *
   * @param segmentId
   * @param body
   * @return Response from the API call
   */
  async pATCHSegmentsSegmentId(
    segmentId: string,
    body?: SegmentUpdate,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SegmentResponse>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      segmentId: [segmentId, string()],
      body: [body, optional(segmentUpdateSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/v3/marketing/segments/2.0/${mapped.segmentId}`;
    req.throwOn(400, V3MarketingSegments20400Error, '');
    req.throwOn(429, ApiError, '');
    req.throwOn(500, V3MarketingSegments20500Error, '');
    return req.callAsJson(segmentResponseSchema, requestOptions);
  }

  /**
   * Get Segment by ID
   *
   * @param segmentId
   * @param contactsSample  Defaults to `true`. Set to `false` to exclude the contacts_sample in the
   *                                   response.
   * @return Response from the API call
   */
  async gETSegmentsSegmentId(
    segmentId: string,
    contactsSample?: boolean,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SegmentResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      segmentId: [segmentId, string()],
      contactsSample: [contactsSample, optional(boolean())],
    });
    req.query('contacts_sample', mapped.contactsSample);
    req.appendTemplatePath`/v3/marketing/segments/2.0/${mapped.segmentId}`;
    req.throwOn(400, V3MarketingSegments20400Error, '');
    req.throwOn(500, V3MarketingSegments20500Error, '');
    return req.callAsJson(segmentResponseSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to delete a segment by ID.**
   *
   * @param segmentId
   * @return Response from the API call
   */
  async dELETESegmentsSegmentId(
    segmentId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ segmentId: [segmentId, string()] });
    req.appendTemplatePath`/v3/marketing/segments/2.0/${mapped.segmentId}`;
    req.throwOn(400, V3MarketingSegments20400Error, '');
    req.throwOn(404, ApiError, '');
    req.throwOn(500, V3MarketingSegments20500Error, '');
    return req.call(requestOptions);
  }
}
