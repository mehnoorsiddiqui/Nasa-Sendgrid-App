/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { boolean, number, object, optional, Schema, string } from '../schema';

export interface SingleSignOnIntegration {
  /** The name of your integration. This name can be anything that makes sense for your organization (eg. Twilio SendGrid) */
  name: string;
  /** Indicates if the integration is enabled. */
  enabled: boolean;
  /** The IdP's SAML POST endpoint. This endpoint should receive requests and initiate an SSO login flow. This is called the "Embed Link" in the Twilio SendGrid UI. */
  signinUrl: string;
  /** This URL is relevant only for an IdP-initiated authentication flow. If a user authenticates from their IdP, this URL will return them to their IdP when logging out. */
  signoutUrl: string;
  /** An identifier provided by your IdP to identify Twilio SendGrid in the SAML interaction. This is called the "SAML Issuer ID" in the Twilio SendGrid UI. */
  entityId: string;
  /** Indicates if the integration is complete. */
  completedIntegration?: boolean;
  /** A timestamp representing the last time the configuration was modified. */
  lastUpdated: number;
  /** A unique ID assigned to the configuration by SendGrid. */
  id?: string;
  /** The URL where your IdP should POST its SAML response. This is the Twilio SendGrid URL that is responsible for receiving and parsing a SAML assertion. This is the same URL as the Audience URL when using SendGrid. */
  singleSignonUrl?: string;
  /** The URL where your IdP should POST its SAML response. This is the Twilio SendGrid URL that is responsible for receiving and parsing a SAML assertion. This is the same URL as the Single Sign-On URL when using SendGrid. */
  audienceUrl?: string;
}

export const singleSignOnIntegrationSchema: Schema<SingleSignOnIntegration> = object(
  {
    name: ['name', string()],
    enabled: ['enabled', boolean()],
    signinUrl: ['signin_url', string()],
    signoutUrl: ['signout_url', string()],
    entityId: ['entity_id', string()],
    completedIntegration: ['completed_integration', optional(boolean())],
    lastUpdated: ['last_updated', number()],
    id: ['id', optional(string())],
    singleSignonUrl: ['single_signon_url', optional(string())],
    audienceUrl: ['audience_url', optional(string())],
  }
);
