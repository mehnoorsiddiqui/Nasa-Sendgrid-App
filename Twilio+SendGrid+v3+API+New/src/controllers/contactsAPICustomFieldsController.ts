/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  GlobalErrorResponseSchema1Error,
} from '../errors/globalErrorResponseSchema1Error';
import {
  ContactDBCustomfieldschemawithID,
  contactDBCustomfieldschemawithIDSchema,
} from '../models/contactDBCustomfieldschemawithID';
import {
  GlobalErrorResponseSchema1,
  globalErrorResponseSchema1Schema,
} from '../models/globalErrorResponseSchema1';
import {
  ListAllCustomFieldsresponse,
  listAllCustomFieldsresponseSchema,
} from '../models/listAllCustomFieldsresponse';
import {
  V3ContactdbCustomFieldsRequest,
  v3ContactdbCustomFieldsRequestSchema,
} from '../models/v3ContactdbCustomFieldsRequest';
import {
  V3ContactdbReservedFieldsResponse,
  v3ContactdbReservedFieldsResponseSchema,
} from '../models/v3ContactdbReservedFieldsResponse';
import { number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class ContactsAPICustomFieldsController extends BaseController {
  /**
   * **This endpoint allows you to create a custom field.**
   *
   * **You can create up to 120 custom fields.**
   *
   * @param onBehalfOf   Example: The subuser's username. This header
   *                                                              generates the API call as if the subuser account was
   *                                                              making the call.
   * @param body
   * @return Response from the API call
   */
  async pOSTContactdbCustomFields(
    onBehalfOf?: string,
    body?: V3ContactdbCustomFieldsRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ContactDBCustomfieldschemawithID>> {
    const req = this.createRequest('POST', '/v3/contactdb/custom_fields');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(v3ContactdbCustomFieldsRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    req.throwOn(400, GlobalErrorResponseSchema1Error, '"" : "Returned if request body is invalid JSON"\n"type" : "Returned if custom field type is invalid or not provided"\n"name" : "Returned if custom field name is not provided"');
    return req.callAsJson(
      contactDBCustomfieldschemawithIDSchema,
      requestOptions
    );
  }

  /**
   * **This endpoint allows you to retrieve all custom fields.**
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETContactdbCustomFields(
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ListAllCustomFieldsresponse>> {
    const req = this.createRequest('GET', '/v3/contactdb/custom_fields');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    return req.callAsJson(listAllCustomFieldsresponseSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve a custom field by ID.**
   *
   * @param customFieldId   The ID of the custom field that you want to retrieve.
   * @param onBehalfOf      Example: The subuser's username. This header generates the API call as if the
   *                                  subuser account was making the call.
   * @return Response from the API call
   */
  async gETContactdbCustomFieldsCustomFieldId(
    customFieldId: number,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ContactDBCustomfieldschemawithID>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      customFieldId: [customFieldId, number()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/contactdb/custom_fields/${mapped.customFieldId}`;
    req.throwOn(400, GlobalErrorResponseSchema1Error, '');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '"custom_field_id" : "Returned if custom_field_id does not exist"');
    return req.callAsJson(
      contactDBCustomfieldschemawithIDSchema,
      requestOptions
    );
  }

  /**
   * **This endpoint allows you to delete a custom field by ID.**
   *
   * @param customFieldId   The ID of the custom field that you want to retrieve.
   * @param onBehalfOf      Example: The subuser's username. This header generates the API call as if the
   *                                  subuser account was making the call.
   * @return Response from the API call
   */
  async dELETEContactdbCustomFieldsCustomFieldId(
    customFieldId: number,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GlobalErrorResponseSchema1>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      customFieldId: [customFieldId, number()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/contactdb/custom_fields/${mapped.customFieldId}`;
    req.throwOn(400, GlobalErrorResponseSchema1Error, '"id" : "Returned if custom_field_id is not valid"');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '"custom_field_id" : "Returned if custom_field_id does not exist"');
    return req.callAsJson(globalErrorResponseSchema1Schema, requestOptions);
  }

  /**
   * **This endpoint allows you to list all fields that are reserved and can't be used for custom field
   * names.**
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETContactdbReservedFields(
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3ContactdbReservedFieldsResponse>> {
    const req = this.createRequest('GET', '/v3/contactdb/reserved_fields');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    return req.callAsJson(
      v3ContactdbReservedFieldsResponseSchema,
      requestOptions
    );
  }
}
