/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  V3MarketingSinglesends400Error1Error,
} from '../errors/v3MarketingSinglesends400Error1Error';
import {
  V3MarketingSinglesends404Error1Error,
} from '../errors/v3MarketingSinglesends404Error1Error';
import {
  V3MarketingSinglesends500Error1Error,
} from '../errors/v3MarketingSinglesends500Error1Error';
import {
  V3MarketingSinglesendsCategories500Error1Error,
} from '../errors/v3MarketingSinglesendsCategories500Error1Error';
import {
  V3MarketingSinglesendsSchedule404Error1Error,
} from '../errors/v3MarketingSinglesendsSchedule404Error1Error';
import {
  V3MarketingSinglesendsSchedule500Error1Error,
} from '../errors/v3MarketingSinglesendsSchedule500Error1Error';
import {
  V3MarketingSinglesendsSearch404Error1Error,
} from '../errors/v3MarketingSinglesendsSearch404Error1Error';
import {
  SinglesendRequest,
  singlesendRequestSchema,
} from '../models/singlesendRequest';
import {
  SinglesendResponse,
  singlesendResponseSchema,
} from '../models/singlesendResponse';
import {
  SinglesendSchedule,
  singlesendScheduleSchema,
} from '../models/singlesendSchedule';
import {
  SinglesendSearch,
  singlesendSearchSchema,
} from '../models/singlesendSearch';
import {
  V3MarketingSinglesendsCategoriesResponse,
  v3MarketingSinglesendsCategoriesResponseSchema,
} from '../models/v3MarketingSinglesendsCategoriesResponse';
import {
  V3MarketingSinglesendsRequest,
  v3MarketingSinglesendsRequestSchema,
} from '../models/v3MarketingSinglesendsRequest';
import {
  V3MarketingSinglesendsResponse,
  v3MarketingSinglesendsResponseSchema,
} from '../models/v3MarketingSinglesendsResponse';
import {
  V3MarketingSinglesendsScheduleRequest,
  v3MarketingSinglesendsScheduleRequestSchema,
} from '../models/v3MarketingSinglesendsScheduleRequest';
import {
  V3MarketingSinglesendsScheduleResponse,
  v3MarketingSinglesendsScheduleResponseSchema,
} from '../models/v3MarketingSinglesendsScheduleResponse';
import { array, number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class SingleSendsController extends BaseController {
  /**
   * **This endpoint allows you to create a new Single Send.**
   *
   * Please note that if you are migrating from the previous version of Single Sends, you no longer need
   * to pass a template ID with your request to this endpoint. Instead, you will pass all template data
   * in the `email_config` object.
   *
   * @param body
   * @return Response from the API call
   */
  async pOSTMarketingSinglesends(
    body?: SinglesendRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SinglesendResponse>> {
    const req = this.createRequest('POST', '/v3/marketing/singlesends');
    const mapped = req.prepareArgs({
      body: [body, optional(singlesendRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, V3MarketingSinglesends400Error1Error, '');
    req.throwOn(500, V3MarketingSinglesends500Error1Error, '');
    return req.callAsJson(singlesendResponseSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve all your Single Sends.**
   *
   * Returns all of your Single Sends with condensed details about each, including the Single Sends' IDs.
   * For more details about an individual Single Send, pass the Single Send's ID to the
   * `/marketing/singlesends/{id}` endpoint.
   *
   * @param pageSize
   * @param pageToken
   * @return Response from the API call
   */
  async gETMarketingSinglesends(
    pageSize?: number,
    pageToken?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3MarketingSinglesendsResponse>> {
    const req = this.createRequest('GET', '/v3/marketing/singlesends');
    const mapped = req.prepareArgs({
      pageSize: [pageSize, optional(number())],
      pageToken: [pageToken, optional(string())],
    });
    req.query('page_size', mapped.pageSize);
    req.query('page_token', mapped.pageToken);
    req.throwOn(500, V3MarketingSinglesends500Error1Error, '');
    return req.callAsJson(v3MarketingSinglesendsResponseSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to delete multiple Single Sends using an array of Single Sends IDs.**
   *
   * To first retrieve all your Single Sends' IDs, you can make a GET request to the
   * `/marketing/singlensends` endpoint.
   *
   * Please note that a DELETE request is permanent, and your Single Sends will not be recoverable after
   * deletion.
   *
   * @param ids Single Send IDs to delete
   * @return Response from the API call
   */
  async dELETEMarketingSinglesends(
    ids?: string[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE', '/v3/marketing/singlesends');
    const mapped = req.prepareArgs({ ids: [ids, optional(array(string()))] });
    req.query('ids', mapped.ids);
    req.throwOn(404, V3MarketingSinglesends404Error1Error, '');
    req.throwOn(500, V3MarketingSinglesends500Error1Error, '');
    return req.call(requestOptions);
  }

  /**
   * **This endpoint allows you to duplicate an existing Single Send using its Single Send ID.**
   *
   * Duplicating a Single Send is useful when you want to create a Single Send but don't want to start
   * from scratch. Once duplicated, you can update or edit the Single Send by making a PATCH request to
   * the `/marketing/singlesends/{id}` endpoint.
   *
   * If you leave the `name` field blank, your duplicate will be assigned the name of the Single Send it
   * was copied from with the text “Copy of ” prepended to it. The `name` field length is limited to 100
   * characters, so the end of the new Single Send name, including “Copy of ”, will be trimmed if the
   * name exceeds this limit.
   *
   * @param id
   * @param body
   * @return Response from the API call
   */
  async pOSTMarketingSinglesendsId(
    id: string,
    body?: V3MarketingSinglesendsRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SinglesendResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      id: [id, string()],
      body: [body, optional(v3MarketingSinglesendsRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/v3/marketing/singlesends/${mapped.id}`;
    req.throwOn(404, V3MarketingSinglesends404Error1Error, '');
    req.throwOn(500, V3MarketingSinglesends500Error1Error, '');
    return req.callAsJson(singlesendResponseSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to update a Single Send using a Single Send ID.**
   *
   * You only need to pass the fields you want to update. Any blank/missing fields will remain unaltered.
   *
   * @param id
   * @param body
   * @return Response from the API call
   */
  async pATCHMarketingSinglesendsId(
    id: string,
    body?: SinglesendRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SinglesendResponse>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      id: [id, string()],
      body: [body, optional(singlesendRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/v3/marketing/singlesends/${mapped.id}`;
    req.throwOn(400, V3MarketingSinglesends400Error1Error, '');
    req.throwOn(404, V3MarketingSinglesends404Error1Error, '');
    req.throwOn(500, V3MarketingSinglesends500Error1Error, '');
    return req.callAsJson(singlesendResponseSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve details about one Single Send using a Single Send ID.**
   *
   * You can retrieve all of your Single Sends by making a GET request to the `/marketing/singlesends`
   * endpoint.
   *
   * @param id
   * @return Response from the API call
   */
  async gETMarketingSinglesendsId(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SinglesendResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/v3/marketing/singlesends/${mapped.id}`;
    req.throwOn(404, V3MarketingSinglesends404Error1Error, '');
    req.throwOn(500, V3MarketingSinglesends500Error1Error, '');
    return req.callAsJson(singlesendResponseSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to delete one Single Send using a Single Send ID.**
   *
   * To first retrieve all your Single Sends' IDs, you can make a GET request to the
   * `/marketing/singlensends` endpoint.
   *
   * Please note that a `DELETE` request is permanent, and your Single Send will not be recoverable after
   * deletion.
   *
   * @param id
   * @return Response from the API call
   */
  async dELETEMarketingSinglesendsId(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/v3/marketing/singlesends/${mapped.id}`;
    req.throwOn(404, V3MarketingSinglesends404Error1Error, '');
    req.throwOn(500, V3MarketingSinglesends500Error1Error, '');
    return req.call(requestOptions);
  }

  /**
   * **This endpoint allows you to search for Single Sends based on specified criteria.**
   *
   * You can search for Single Sends by passing a combination of values using the `name`, `status`, and
   * `categories` request body fields.
   *
   * For example, if you want to search for all Single Sends that are "drafts" or "scheduled" and also
   * associated with the category "shoes," your request body may look like the example below.
   *
   * ```javascript
   * {
   * "status": [
   * "draft",
   * "scheduled"
   * ],
   * "categories": [
   * "shoes"
   * ],
   * }
   * ```
   *
   * @param pageSize
   * @param pageToken
   * @param body
   * @return Response from the API call
   */
  async pOSTMarketingSinglesendsSearch(
    pageSize?: number,
    pageToken?: string,
    body?: SinglesendSearch,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3MarketingSinglesendsResponse>> {
    const req = this.createRequest('POST', '/v3/marketing/singlesends/search');
    const mapped = req.prepareArgs({
      pageSize: [pageSize, optional(number())],
      pageToken: [pageToken, optional(string())],
      body: [body, optional(singlesendSearchSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.query('page_size', mapped.pageSize);
    req.query('page_token', mapped.pageToken);
    req.json(mapped.body);
    req.throwOn(404, V3MarketingSinglesendsSearch404Error1Error, '');
    return req.callAsJson(v3MarketingSinglesendsResponseSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to schedule a Single Send for future delivery using a Single Send ID.**
   *
   * To schedule a Single Send, you must pass a date string in ISO 8601 time format (yyyy-MM-ddTHH:mm:
   * ssZ)  using the required `send_at` field. For example, the ISO 8601 format for 9:00 AM UTC on May 6,
   * 2020 would be `2020-05-06T09:00:00Z`. You may also pass the string `"now"` to send the Single Send
   * immediately.
   *
   * @param id
   * @param body
   * @return Response from the API call
   */
  async pUTMarketingSinglesendsIdSchedule(
    id: string,
    body?: V3MarketingSinglesendsScheduleRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3MarketingSinglesendsScheduleResponse>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      id: [id, string()],
      body: [body, optional(v3MarketingSinglesendsScheduleRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/v3/marketing/singlesends/${mapped.id}/schedule`;
    req.throwOn(404, V3MarketingSinglesendsSchedule404Error1Error, '');
    req.throwOn(500, V3MarketingSinglesendsSchedule500Error1Error, '');
    return req.callAsJson(
      v3MarketingSinglesendsScheduleResponseSchema,
      requestOptions
    );
  }

  /**
   * **This endpoint allows you to cancel a scheduled Single Send using a Single Send ID.**
   *
   * Making a DELETE request to this endpoint will cancel the scheduled sending of a Single Send. The
   * request will not delete the Single Send itself. Deleting a Single Send can be done by passing a
   * DELETE request to `/marketing/singlesends/{id}`.
   *
   * @param id
   * @return Response from the API call
   */
  async dELETEMarketingSinglesendsIdSchedule(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SinglesendSchedule>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/v3/marketing/singlesends/${mapped.id}/schedule`;
    req.throwOn(404, V3MarketingSinglesendsSchedule404Error1Error, '');
    req.throwOn(500, V3MarketingSinglesendsSchedule500Error1Error, '');
    return req.callAsJson(singlesendScheduleSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve all the categories associated with your Single Sends.**
   *
   * This endpoint will return your latest 1,000 categories.
   *
   * @return Response from the API call
   */
  async gETMarketingSinglesendsCategories(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3MarketingSinglesendsCategoriesResponse>> {
    const req = this.createRequest(
      'GET',
      '/v3/marketing/singlesends/categories'
    );
    req.throwOn(500, V3MarketingSinglesendsCategories500Error1Error, '');
    return req.callAsJson(
      v3MarketingSinglesendsCategoriesResponseSchema,
      requestOptions
    );
  }
}
