/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  GlobalErrorResponseSchema1Error,
} from '../errors/globalErrorResponseSchema1Error';
import { V3MailBatch400Error1Error } from '../errors/v3MailBatch400Error1Error';
import { V3MailSend500Error1Error } from '../errors/v3MailSend500Error1Error';
import {
  Cancelorpauseascheduledsendrequest,
  cancelorpauseascheduledsendrequestSchema,
} from '../models/cancelorpauseascheduledsendrequest';
import { MailBatchID, mailBatchIDSchema } from '../models/mailBatchID';
import {
  UserScheduledSendstatus,
  userScheduledSendstatusSchema,
} from '../models/userScheduledSendstatus';
import {
  V3UserScheduledSendsRequest,
  v3UserScheduledSendsRequestSchema,
} from '../models/v3UserScheduledSendsRequest';
import { array, nullable, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class CancelScheduledSendsController extends BaseController {
  /**
   * **This endpoint allows you to generate a new batch ID.**
   *
   * Once a `batch_id` is created, you can associate it with a scheduled send using the `/mail/send`
   * endpoint. Passing the `batch_id` as a field in the `/mail/send` request body will assign the ID to
   * the send you are creating.
   *
   * Once an ID is associated with a scheduled send, the send can be accessed and its send status can be
   * modified using the `batch_id`.
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async pOSTMailBatch(
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MailBatchID>> {
    const req = this.createRequest('POST', '/v3/mail/batch');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.throwOn(400, V3MailBatch400Error1Error, '');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(mailBatchIDSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to cancel or pause a scheduled send associated with a `batch_id`.**
   *
   * Passing this endpoint a `batch_id` and status will cancel or pause the scheduled send.
   *
   * Once a scheduled send is set to `pause` or `cancel` you must use the "Update a scheduled send"
   * endpoint to change its status or the "Delete a cancellation or pause from a scheduled send" endpoint
   * to remove the status. Passing a status change to a scheduled send that has already been paused or
   * cancelled will result in a `400` level status code.
   *
   * If the maximum number of cancellations/pauses are added to a send, a `400` level status code will be
   * returned.
   *
   * @param onBehalfOf   Example: The subuser's username. This header
   *                                                                  generates the API call as if the subuser account
   *                                                                  was making the call.
   * @param body
   * @return Response from the API call
   */
  async pOSTUserScheduledSends(
    onBehalfOf?: string,
    body?: Cancelorpauseascheduledsendrequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UserScheduledSendstatus>> {
    const req = this.createRequest('POST', '/v3/user/scheduled_sends');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(cancelorpauseascheduledsendrequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    req.throwOn(400, V3MailBatch400Error1Error, '');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(userScheduledSendstatusSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve all cancelled and paused scheduled send information.**
   *
   * This endpoint will return only the scheduled sends that are associated with a `batch_id`. If you
   * have scheduled a send using the `/mail/send` endpoint and the `send_at` field but no `batch_id`, the
   * send will be scheduled for delivery; however, it will not be returned by this endpoint. For this
   * reason, you should assign a `batch_id` to any scheduled send you may need to pause or cancel in the
   * future.
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETUserScheduledSends(
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UserScheduledSendstatus[]>> {
    const req = this.createRequest('GET', '/v3/user/scheduled_sends');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.throwOn(400, V3MailBatch400Error1Error, '');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(array(userScheduledSendstatusSchema), requestOptions);
  }

  /**
   * **This endpoint allows you to validate a batch ID.**
   *
   * When you pass a valid `batch_id` to this endpoint, it will return a `200` status code and the batch
   * ID itself.
   *
   * If you pass an invalid `batch_id` to the endpoint, you will receive a `400` level status code and an
   * error message.
   *
   * A `batch_id` does not need to be assigned to a scheduled send to be considered valid. A successful
   * response means only that the `batch_id` has been created, but it does not indicate that it has been
   * associated with a send.
   *
   * @param batchId
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETMailBatchBatchId(
    batchId: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MailBatchID>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      batchId: [batchId, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/mail/batch/${mapped.batchId}`;
    req.throwOn(400, V3MailBatch400Error1Error, '');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(mailBatchIDSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve the cancel/paused scheduled send information for a specific
   * `batch_id`.**
   *
   * @param batchId
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETUserScheduledSendsBatchId(
    batchId: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UserScheduledSendstatus[]>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      batchId: [batchId, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/user/scheduled_sends/${mapped.batchId}`;
    req.throwOn(400, V3MailBatch400Error1Error, '');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(array(userScheduledSendstatusSchema), requestOptions);
  }

  /**
   * **This endpoint allows you to update the status of a scheduled send for the given `batch_id`.**
   *
   * If you have already set a `cancel` or `pause` status on a scheduled send using the "Cancel or pause
   * a scheduled send" endpoint, you can update it's status using this endpoint. Attempting to update a
   * status once it has been set with the "Cancel or pause a scheduled send" endpoint will result in a
   * `400` error.
   *
   * @param batchId
   * @param onBehalfOf   Example: The subuser's username. This header generates
   *                                                           the API call as if the subuser account was making the
   *                                                           call.
   * @param body
   * @return Response from the API call
   */
  async pATCHUserScheduledSendsBatchId(
    batchId: string,
    onBehalfOf?: string,
    body?: V3UserScheduledSendsRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      batchId: [batchId, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(v3UserScheduledSendsRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    req.appendTemplatePath`/v3/user/scheduled_sends/${mapped.batchId}`;
    req.throwOn(400, V3MailBatch400Error1Error, '');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(nullable(unknown()), requestOptions);
  }

  /**
   * **This endpoint allows you to delete the cancellation/pause of a scheduled send.**
   *
   * Scheduled sends cancelled less than 10 minutes before the scheduled time are not guaranteed to be
   * cancelled.
   *
   * @param batchId
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async dELETEUserScheduledSendsBatchId(
    batchId: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      batchId: [batchId, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/user/scheduled_sends/${mapped.batchId}`;
    req.throwOn(400, V3MailBatch400Error1Error, '');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.call(requestOptions);
  }
}
