/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { SSOErrorResponse1Error } from '../errors/sSOErrorResponse1Error';
import {
  CreateIntegrationRequest,
  createIntegrationRequestSchema,
} from '../models/createIntegrationRequest';
import {
  SingleSignOnIntegration,
  singleSignOnIntegrationSchema,
} from '../models/singleSignOnIntegration';
import { array, boolean, optional, string } from '../schema';
import { BaseController } from './baseController';

export class SingleSignOnSettingsController extends BaseController {
  /**
   * **This endpoint allows you to create an SSO integration.**
   *
   * @param body
   * @return Response from the API call
   */
  async pOSTSsoIntegrations(
    body?: CreateIntegrationRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SingleSignOnIntegration>> {
    const req = this.createRequest('POST', '/v3/sso/integrations');
    const mapped = req.prepareArgs({
      body: [body, optional(createIntegrationRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, SSOErrorResponse1Error, '');
    req.throwOn(401, SSOErrorResponse1Error, '');
    req.throwOn(403, SSOErrorResponse1Error, '');
    req.throwOn(429, SSOErrorResponse1Error, '');
    req.throwOn(500, SSOErrorResponse1Error, '');
    return req.callAsJson(singleSignOnIntegrationSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve all SSO integrations tied to your Twilio SendGrid account.**
   *
   * The IDs returned by this endpoint can be used by the APIs additional endpoints to modify your SSO
   * integrations.
   *
   * @param si If this parameter is set to `true`, the response will include the `completed_integration`
   *                      field.
   * @return Response from the API call
   */
  async gETSsoIntegrations(
    si?: boolean,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SingleSignOnIntegration[]>> {
    const req = this.createRequest('GET', '/v3/sso/integrations');
    const mapped = req.prepareArgs({ si: [si, optional(boolean())] });
    req.query('si', mapped.si);
    req.throwOn(400, SSOErrorResponse1Error, '');
    req.throwOn(401, SSOErrorResponse1Error, '');
    req.throwOn(403, SSOErrorResponse1Error, '');
    req.throwOn(429, SSOErrorResponse1Error, '');
    req.throwOn(500, SSOErrorResponse1Error, '');
    return req.callAsJson(array(singleSignOnIntegrationSchema), requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve an SSO integration by ID.**
   *
   * You can retrieve the IDs for your configurations from the response provided by the "Get All SSO
   * Integrations" endpoint.
   *
   * @param id
   * @param si If this parameter is set to `true`, the response will include the `completed_integration`
   *                      field.
   * @return Response from the API call
   */
  async gETSsoIntegrationsId(
    id: string,
    si?: boolean,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SingleSignOnIntegration>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      id: [id, string()],
      si: [si, optional(boolean())],
    });
    req.query('si', mapped.si);
    req.appendTemplatePath`/v3/sso/integrations/${mapped.id}`;
    req.throwOn(400, SSOErrorResponse1Error, '');
    req.throwOn(401, SSOErrorResponse1Error, '');
    req.throwOn(403, SSOErrorResponse1Error, '');
    req.throwOn(429, SSOErrorResponse1Error, '');
    req.throwOn(500, SSOErrorResponse1Error, '');
    return req.callAsJson(singleSignOnIntegrationSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to modify an exisiting SSO integration.**
   *
   * You can retrieve the IDs for your configurations from the response provided by the "Get All SSO
   * Integrations" endpoint.
   *
   * @param id
   * @param si           If this parameter is set to `true`, the response will
   *                                                        include the `completed_integration` field.
   * @param body
   * @return Response from the API call
   */
  async pATCHSsoIntegrationsId(
    id: string,
    si?: boolean,
    body?: CreateIntegrationRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SingleSignOnIntegration>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      id: [id, string()],
      si: [si, optional(boolean())],
      body: [body, optional(createIntegrationRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.query('si', mapped.si);
    req.json(mapped.body);
    req.appendTemplatePath`/v3/sso/integrations/${mapped.id}`;
    req.throwOn(400, SSOErrorResponse1Error, '');
    req.throwOn(401, SSOErrorResponse1Error, '');
    req.throwOn(403, SSOErrorResponse1Error, '');
    req.throwOn(429, SSOErrorResponse1Error, '');
    req.throwOn(500, SSOErrorResponse1Error, '');
    return req.callAsJson(singleSignOnIntegrationSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to delete an IdP configuration by ID.**
   *
   * You can retrieve the IDs for your configurations from the response provided by the "Get All SSO
   * Integrations" endpoint.
   *
   * @param id
   * @return Response from the API call
   */
  async dELETESsoIntegrationsId(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/v3/sso/integrations/${mapped.id}`;
    req.throwOn(400, SSOErrorResponse1Error, '');
    req.throwOn(401, SSOErrorResponse1Error, '');
    req.throwOn(403, SSOErrorResponse1Error, '');
    req.throwOn(429, SSOErrorResponse1Error, '');
    req.throwOn(500, SSOErrorResponse1Error, '');
    return req.call(requestOptions);
  }
}
