/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import {
  GlobalErrorResponseSchema1Error,
} from '../errors/globalErrorResponseSchema1Error';
import { ContactDBlists, contactDBlistsSchema } from '../models/contactDBlists';
import {
  ContentTypeEnum,
  contentTypeEnumSchema,
} from '../models/contentTypeEnum';
import {
  CreateaListrequest,
  createaListrequestSchema,
} from '../models/createaListrequest';
import {
  ListAllListsresponse,
  listAllListsresponseSchema,
} from '../models/listAllListsresponse';
import {
  UpdateaListrequest,
  updateaListrequestSchema,
} from '../models/updateaListrequest';
import {
  V3ContactdbListsRecipientsResponse,
  v3ContactdbListsRecipientsResponseSchema,
} from '../models/v3ContactdbListsRecipientsResponse';
import {
  V3ContactdbListsResponse,
  v3ContactdbListsResponseSchema,
} from '../models/v3ContactdbListsResponse';
import {
  array,
  boolean,
  nullable,
  number,
  optional,
  string,
  unknown,
} from '../schema';
import { BaseController } from './baseController';

export class ContactsAPIListsController extends BaseController {
  /**
   * **This endpoint allows you to create a list for your recipients.**
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the API
   *                                                  call as if the subuser account was making the call.
   * @param body
   * @return Response from the API call
   */
  async pOSTContactdbLists(
    onBehalfOf?: string,
    body?: CreateaListrequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ContactDBlists>> {
    const req = this.createRequest('POST', '/v3/contactdb/lists');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(createaListrequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    req.throwOn(400, GlobalErrorResponseSchema1Error, '"name" : "Returned if list name is a duplicate of an existing list or segment"\n"name" : "Returned if list name is not a string"\n"" : "Returned if request body is invalid JSON"');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    return req.callAsJson(contactDBlistsSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve all of your recipient lists. If you don't have any lists, an
   * empty array will be returned.**
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETContactdbLists(
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ListAllListsresponse>> {
    const req = this.createRequest('GET', '/v3/contactdb/lists');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    return req.callAsJson(listAllListsresponseSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to delete multiple recipient lists.**
   *
   * @param contentType
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if
   *                                        the subuser account was making the call.
   * @return Response from the API call
   */
  async dELETEContactdbLists(
    contentType: ContentTypeEnum,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE', '/v3/contactdb/lists');
    const mapped = req.prepareArgs({
      contentType: [contentType, contentTypeEnumSchema],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('Content-Type', mapped.contentType);
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.throwOn(400, GlobalErrorResponseSchema1Error, '"id" : "Returned if all list ids are not valid"');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    return req.callAsJson(nullable(unknown()), requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve a single recipient list.**
   *
   * @param listId       The ID of the list to retrieve.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETContactdbListsListId(
    listId: number,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ContactDBlists>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      listId: [listId, number()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/contactdb/lists/${mapped.listId}`;
    req.throwOn(400, GlobalErrorResponseSchema1Error, '"list_id" : "Returned if list_id is not valid"');
    req.throwOn(401, GlobalErrorResponseSchema1Error, 'error');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '"list_id" : "Returned if list_id does not exist"');
    return req.callAsJson(contactDBlistsSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to update the name of one of your recipient lists.**
   *
   * @param listId       The ID of the list you are updating.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API
   *                                                  call as if the subuser account was making the call.
   * @param body
   * @return Response from the API call
   */
  async pATCHContactdbListsListId(
    listId: number,
    onBehalfOf?: string,
    body?: UpdateaListrequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3ContactdbListsResponse>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      listId: [listId, number()],
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(updateaListrequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    req.appendTemplatePath`/v3/contactdb/lists/${mapped.listId}`;
    req.throwOn(400, GlobalErrorResponseSchema1Error, '"name" : "Returned if list name is a duplicate of existing list or segment"\n"name" : "Returned if list name is invalid or not provided"\n"list_id" : "Returned if list_id is not valid"\n"" : "Returned if request body is invalid JSON"');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '"list_id" : "Returned if list_id does not exist"');
    return req.callAsJson(v3ContactdbListsResponseSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to delete a specific recipient list with the given ID.**
   *
   * @param listId
   * @param contentType
   * @param deleteContacts  Adds the ability to delete all contacts on the list in addition to
   *                                           deleting the list.
   * @param onBehalfOf      Example: The subuser's username. This header generates the API call as
   *                                           if the subuser account was making the call.
   * @return Response from the API call
   */
  async dELETEContactdbListsListId(
    listId: string,
    contentType: ContentTypeEnum,
    deleteContacts?: boolean,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      listId: [listId, string()],
      contentType: [contentType, contentTypeEnumSchema],
      deleteContacts: [deleteContacts, optional(boolean())],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('Content-Type', mapped.contentType);
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.query('delete_contacts', mapped.deleteContacts);
    req.appendTemplatePath`/v3/contactdb/lists/${mapped.listId}`;
    req.throwOn(400, GlobalErrorResponseSchema1Error, '"list_id" : "Returned if list_id is not valid"\n"delete_contacts" : "Returned if delete_contacts is not valid"');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '"list_id" : "Returned if list_id does not exist"');
    return req.callAsJson(nullable(unknown()), requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve all recipients on the list with the given ID.**
   *
   * @param listId       The ID of the list whose recipients you are requesting.
   * @param page         Page index of first recipient to return (must be a positive integer)
   * @param pageSize     Number of recipients to return at a time (must be a positive integer between 1 and
   *                               1000)
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETContactdbListsListIdRecipients(
    listId: number,
    page?: number,
    pageSize?: number,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3ContactdbListsRecipientsResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      listId: [listId, number()],
      page: [page, optional(number())],
      pageSize: [pageSize, optional(number())],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.query('page', mapped.page);
    req.query('page_size', mapped.pageSize);
    req.appendTemplatePath`/v3/contactdb/lists/${mapped.listId}/recipients`;
    req.throwOn(400, GlobalErrorResponseSchema1Error, '"list_id" : "Returned if list_id is not a valid integer"\n"page" : "Returned if page is not a valid integer"\n"page" : "Returned if page is less than 1"\n"page_size" : "Returned if page_size is not a valid integer"\n"page_size" : "Returned if page_size is less than 1 or greater than 1000"');
    req.throwOn(404, ApiError, '"list_id" : "Returned if list_id does not exist"');
    return req.callAsJson(
      v3ContactdbListsRecipientsResponseSchema,
      requestOptions
    );
  }

  /**
   * **This endpoint allows you to add multiple recipients to a list.**
   *
   * Adds existing recipients to a list, passing in the recipient IDs to add. Recipient IDs should be
   * passed exactly as they are returned from recipient endpoints.
   *
   * @param listId       The id of the list of recipients you want to retrieve.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                                 subuser account was making the call.
   * @param body
   * @return Response from the API call
   */
  async pOSTContactdbListsListIdRecipients(
    listId: number,
    onBehalfOf?: string,
    body?: number[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      listId: [listId, number()],
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(array(number()))],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    req.appendTemplatePath`/v3/contactdb/lists/${mapped.listId}/recipients`;
    req.throwOn(400, GlobalErrorResponseSchema1Error, '"list_id" : "Returned if list_id is not a valid integer"\n"" : "Returned if no valid recipient ids were passed"\n"" : "Returned if no recipients were added"\n"" : "Returned if request body is invalid JSON"');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '"list_id": "Returned if list_id does not exist"');
    return req.callAsJson(nullable(unknown()), requestOptions);
  }

  /**
   * **This endpoint allows you to add a single recipient to a list.**
   *
   * @param listId       The ID of the list that you want to add the recipient to.
   * @param recipientId  The ID of the recipient you are adding to the list.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async pOSTContactdbListsListIdRecipientsRecipientId(
    listId: number,
    recipientId: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      listId: [listId, number()],
      recipientId: [recipientId, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/contactdb/lists/${mapped.listId}/recipients/${mapped.recipientId}`;
    req.throwOn(400, GlobalErrorResponseSchema1Error, '"list_id" : "Returned if list_id is invalid"\n"recipient_id" : "Returned if recipient_id is invalid"');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '"list_id" : "Returned if list_id does not exist"\n"recipient_id" : "Returned if recipient_id does not exist"');
    return req.callAsJson(nullable(unknown()), requestOptions);
  }

  /**
   * **This endpoint allows you to delete a single recipient from a list.**
   *
   * @param listId       The ID of the list you are taking this recipient away from.
   * @param recipientId  The ID of the recipient to take off the list.
   * @param contentType
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if
   *                                        the subuser account was making the call.
   * @return Response from the API call
   */
  async dELETEContactdbListsListIdRecipientsRecipientId(
    listId: number,
    recipientId: number,
    contentType: ContentTypeEnum,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      listId: [listId, number()],
      recipientId: [recipientId, number()],
      contentType: [contentType, contentTypeEnumSchema],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('Content-Type', mapped.contentType);
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/contactdb/lists/${mapped.listId}/recipients/${mapped.recipientId}`;
    req.throwOn(400, GlobalErrorResponseSchema1Error, '"list_id" : "Returned if list_id is not valid"\n"recipient_id" : "Returned if recipient_id is not valid"');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '"list_id" : "Returned if list_id does not exist"\n"recipient_id" : "Returned if recipient_id does not exist"');
    return req.callAsJson(nullable(unknown()), requestOptions);
  }
}
