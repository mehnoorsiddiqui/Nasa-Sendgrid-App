/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { SSOErrorResponse1Error } from '../errors/sSOErrorResponse1Error';
import {
  SingleSignOnCertificateBody,
  singleSignOnCertificateBodySchema,
} from '../models/singleSignOnCertificateBody';
import {
  V3SsoCertificatesRequest,
  v3SsoCertificatesRequestSchema,
} from '../models/v3SsoCertificatesRequest';
import {
  V3SsoCertificatesRequest1,
  v3SsoCertificatesRequest1Schema,
} from '../models/v3SsoCertificatesRequest1';
import { array, optional, string } from '../schema';
import { BaseController } from './baseController';

export class CertificatesController extends BaseController {
  /**
   * **This endpoint allows you to create an SSO certificate.**
   *
   * @param body
   * @return Response from the API call
   */
  async pOSTSsoCertificates(
    body?: V3SsoCertificatesRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SingleSignOnCertificateBody>> {
    const req = this.createRequest('POST', '/v3/sso/certificates');
    const mapped = req.prepareArgs({
      body: [body, optional(v3SsoCertificatesRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, SSOErrorResponse1Error, '');
    req.throwOn(401, SSOErrorResponse1Error, '');
    req.throwOn(403, SSOErrorResponse1Error, '');
    req.throwOn(429, SSOErrorResponse1Error, '');
    req.throwOn(500, SSOErrorResponse1Error, '');
    return req.callAsJson(singleSignOnCertificateBodySchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve all your IdP configurations by configuration ID.**
   *
   * The `integration_id` expected by this endpoint is the `id` returned in the response by the "Get All
   * SSO Integrations" endpoint.
   *
   * @param integrationId  An ID that matches a certificate to a specific IdP integration.
   * @return Response from the API call
   */
  async gETSsoIntegrationsIntegrationIdCertificates(
    integrationId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SingleSignOnCertificateBody[]>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      integrationId: [integrationId, string()],
    });
    req.appendTemplatePath`/v3/sso/integrations/${mapped.integrationId}/certificates`;
    req.throwOn(400, SSOErrorResponse1Error, '');
    req.throwOn(401, SSOErrorResponse1Error, '');
    req.throwOn(403, SSOErrorResponse1Error, '');
    req.throwOn(429, SSOErrorResponse1Error, '');
    req.throwOn(500, SSOErrorResponse1Error, '');
    return req.callAsJson(
      array(singleSignOnCertificateBodySchema),
      requestOptions
    );
  }

  /**
   * **This endpoint allows you to retrieve an individual SSO certificate.**
   *
   * @param certId
   * @return Response from the API call
   */
  async gETSsoCertificatesCertId(
    certId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SingleSignOnCertificateBody>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ certId: [certId, string()] });
    req.appendTemplatePath`/v3/sso/certificates/${mapped.certId}`;
    req.throwOn(400, SSOErrorResponse1Error, '');
    req.throwOn(401, SSOErrorResponse1Error, '');
    req.throwOn(403, SSOErrorResponse1Error, '');
    req.throwOn(429, SSOErrorResponse1Error, '');
    req.throwOn(500, SSOErrorResponse1Error, '');
    return req.callAsJson(singleSignOnCertificateBodySchema, requestOptions);
  }

  /**
   * **This endpoint allows you to update an existing certificate by ID.**
   *
   * You can retrieve a certificate's ID from the response provided by the "Get All SSO Integrations"
   * endpoint.
   *
   * @param certId
   * @param body
   * @return Response from the API call
   */
  async pATCHSsoCertificatesCertId(
    certId: string,
    body?: V3SsoCertificatesRequest1,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      certId: [certId, string()],
      body: [body, optional(v3SsoCertificatesRequest1Schema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/v3/sso/certificates/${mapped.certId}`;
    req.throwOn(400, SSOErrorResponse1Error, '');
    req.throwOn(401, SSOErrorResponse1Error, '');
    req.throwOn(403, SSOErrorResponse1Error, '');
    req.throwOn(429, SSOErrorResponse1Error, '');
    req.throwOn(500, SSOErrorResponse1Error, '');
    return req.call(requestOptions);
  }

  /**
   * **This endpoint allows you to delete an SSO certificate.**
   *
   * You can retrieve a certificate's ID from the response provided by the "Get All SSO Integrations"
   * endpoint.
   *
   * @param certId
   * @return Response from the API call
   */
  async dELETESsoCertificatesCertId(
    certId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SingleSignOnCertificateBody>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ certId: [certId, string()] });
    req.appendTemplatePath`/v3/sso/certificates/${mapped.certId}`;
    req.throwOn(400, SSOErrorResponse1Error, '');
    req.throwOn(401, SSOErrorResponse1Error, '');
    req.throwOn(403, SSOErrorResponse1Error, '');
    req.throwOn(429, SSOErrorResponse1Error, '');
    req.throwOn(500, SSOErrorResponse1Error, '');
    return req.callAsJson(singleSignOnCertificateBodySchema, requestOptions);
  }
}
