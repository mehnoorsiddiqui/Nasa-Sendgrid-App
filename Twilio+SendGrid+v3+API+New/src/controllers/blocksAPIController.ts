/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { BlocksResponse, blocksResponseSchema } from '../models/blocksResponse';
import {
  ContentTypeEnum,
  contentTypeEnumSchema,
} from '../models/contentTypeEnum';
import { array, number, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class BlocksAPIController extends BaseController {
  /**
   * **This endpoint allows you to retrieve all email addresses that are currently on your blocks list. A
   * maximum of 500 blocks will be returned per query. You can use the `offset` and `limit` parameters to
   * retrieve more or less than 500 results.**
   *
   * @param startTime    The start of the time range when a blocked email was created (inclusive). This is a
   *                               unix timestamp.
   * @param endTime      The end of the time range when a blocked email was created (inclusive). This is a
   *                               unix timestamp.
   * @param limit        Limit the number of results to be displayed per page.
   * @param offset       The point in the list to begin displaying results. To retrieve more than 500
   *                               results, you can make multiple requests to the API, using the `offset` to begin at
   *                               the next result in the list.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETSuppressionBlocks(
    startTime?: number,
    endTime?: number,
    limit?: number,
    offset?: number,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<BlocksResponse[]>> {
    const req = this.createRequest('GET', '/v3/suppression/blocks');
    const mapped = req.prepareArgs({
      startTime: [startTime, optional(number())],
      endTime: [endTime, optional(number())],
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.query('start_time', mapped.startTime);
    req.query('end_time', mapped.endTime);
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    return req.callAsJson(array(blocksResponseSchema), requestOptions);
  }

  /**
   * **This endpoint allows you to delete all email addresses on your blocks list.**
   *
   * There are two options for deleting blocked emails:
   *
   * 1. You can delete all blocked emails by setting `delete_all` to `true` in the request body.
   * 2. You can delete a selection of blocked emails by specifying the email addresses in the `emails`
   * array of the request body.
   *
   * @param contentType
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if
   *                                        the subuser account was making the call.
   * @return Response from the API call
   */
  async dELETESuppressionBlocks(
    contentType: ContentTypeEnum,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE', '/v3/suppression/blocks');
    const mapped = req.prepareArgs({
      contentType: [contentType, contentTypeEnumSchema],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('Content-Type', mapped.contentType);
    req.header('on-behalf-of', mapped.onBehalfOf);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve a specific email address from your blocks list.**
   *
   * @param email        The email address of the specific block.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETSuppressionBlocksEmail(
    email: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<BlocksResponse[]>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      email: [email, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/suppression/blocks/${mapped.email}`;
    return req.callAsJson(array(blocksResponseSchema), requestOptions);
  }

  /**
   * **This endpoint allows you to delete a specific email address from your blocks list.**
   *
   * @param email        The email address of the specific block.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async dELETESuppressionBlocksEmail(
    email: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      email: [email, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/suppression/blocks/${mapped.email}`;
    return req.callAsJson(unknown(), requestOptions);
  }
}
