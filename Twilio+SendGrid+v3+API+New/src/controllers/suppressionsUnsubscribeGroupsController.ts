/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  SuppressionGroupRequestBase,
  suppressionGroupRequestBaseSchema,
} from '../models/suppressionGroupRequestBase';
import {
  SuppressionsSuppressionGroup,
  suppressionsSuppressionGroupSchema,
} from '../models/suppressionsSuppressionGroup';
import {
  V3AsmGroupsResponse,
  v3AsmGroupsResponseSchema,
} from '../models/v3AsmGroupsResponse';
import {
  V3AsmGroupsResponse1,
  v3AsmGroupsResponse1Schema,
} from '../models/v3AsmGroupsResponse1';
import { array, number, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class SuppressionsUnsubscribeGroupsController extends BaseController {
  /**
   * **This endpoint allows you to create a new suppression group.**
   *
   * To add an email address to the suppression group, [create a Suppression](https://sendgrid.api-docs.
   * io/v3.0/suppressions-suppressions/add-suppressions-to-a-suppression-group).
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates
   *                                                           the API call as if the subuser account was making the
   *                                                           call.
   * @param body
   * @return Response from the API call
   */
  async pOSTAsmGroups(
    onBehalfOf?: string,
    body?: SuppressionGroupRequestBase,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3AsmGroupsResponse>> {
    const req = this.createRequest('POST', '/v3/asm/groups');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(suppressionGroupRequestBaseSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    return req.callAsJson(v3AsmGroupsResponseSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve a list of all suppression groups created by this user.**
   *
   * This endpoint can also return information for multiple group IDs that you include in your request.
   * To add a group ID to your request, simply append `?id=123456&id=123456`, with the appropriate group
   * IDs.
   *
   * @param id
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETAsmGroups(
    id?: number,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SuppressionsSuppressionGroup[]>> {
    const req = this.createRequest('GET', '/v3/asm/groups');
    const mapped = req.prepareArgs({
      id: [id, optional(number())],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.query('id', mapped.id);
    return req.callAsJson(
      array(suppressionsSuppressionGroupSchema),
      requestOptions
    );
  }

  /**
   * **This endpoint allows you to retrieve a single suppression group.**
   *
   * @param groupId      The ID of the suppression group you would like to retrieve.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETAsmGroupsGroupId(
    groupId: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3AsmGroupsResponse1>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      groupId: [groupId, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/asm/groups/${mapped.groupId}`;
    return req.callAsJson(v3AsmGroupsResponse1Schema, requestOptions);
  }

  /**
   * **This endpoint allows you to update or change a suppression group.**
   *
   * @param groupId      The ID of the suppression group you would like to
   *                                                           retrieve.
   * @param onBehalfOf   Example: The subuser's username. This header generates
   *                                                           the API call as if the subuser account was making the
   *                                                           call.
   * @param body
   * @return Response from the API call
   */
  async pATCHAsmGroupsGroupId(
    groupId: string,
    onBehalfOf?: string,
    body?: SuppressionGroupRequestBase,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SuppressionsSuppressionGroup>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      groupId: [groupId, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(suppressionGroupRequestBaseSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    req.appendTemplatePath`/v3/asm/groups/${mapped.groupId}`;
    return req.callAsJson(suppressionsSuppressionGroupSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to delete a suppression group.**
   *
   * If a recipient uses the "one-click unsubscribe" option on an email associated with a deleted group,
   * that recipient will be added to the global suppression list.
   *
   * Deleting a suppression group will remove the suppression, meaning email will once again be sent to
   * the previously suppressed addresses. This should be avoided unless a recipient indicates they wish
   * to receive email from you again. You can use our [bypass filters](https://sendgrid.
   * com/docs/ui/sending-email/index-suppressions/#bypass-suppressions) to deliver messages to otherwise
   * suppressed addresses when exceptions are required.
   *
   * @param groupId      The ID of the suppression group you would like to retrieve.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async dELETEAsmGroupsGroupId(
    groupId: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      groupId: [groupId, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/asm/groups/${mapped.groupId}`;
    return req.callAsJson(unknown(), requestOptions);
  }
}
