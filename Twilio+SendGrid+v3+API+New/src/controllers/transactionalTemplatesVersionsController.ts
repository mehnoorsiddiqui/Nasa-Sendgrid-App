/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  TransactionalTemplatesVersionCreate,
  transactionalTemplatesVersionCreateSchema,
} from '../models/transactionalTemplatesVersionCreate';
import {
  TransactionalTemplatesVersionOutput,
  transactionalTemplatesVersionOutputSchema,
} from '../models/transactionalTemplatesVersionOutput';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class TransactionalTemplatesVersionsController extends BaseController {
  /**
   * **This endpoint allows you to create a new version of a template.**
   *
   * @param templateId
   * @param onBehalfOf   Example: The subuser's username. This header
   *                                                                   generates the API call as if the subuser account
   *                                                                   was making the call.
   * @param body
   * @return Response from the API call
   */
  async pOSTTemplatesTemplateIdVersions(
    templateId: string,
    onBehalfOf?: string,
    body?: TransactionalTemplatesVersionCreate,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TransactionalTemplatesVersionOutput>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      templateId: [templateId, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(transactionalTemplatesVersionCreateSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    req.appendTemplatePath`/v3/templates/${mapped.templateId}/versions`;
    return req.callAsJson(
      transactionalTemplatesVersionOutputSchema,
      requestOptions
    );
  }

  /**
   * **This endpoint allows you to retrieve a specific version of a template.**
   *
   * @param templateId   The ID of the original template
   * @param versionId    The ID of the template version
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETTemplatesTemplateIdVersionsVersionId(
    templateId: string,
    versionId: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TransactionalTemplatesVersionOutput>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      templateId: [templateId, string()],
      versionId: [versionId, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/templates/${mapped.templateId}/versions/${mapped.versionId}`;
    return req.callAsJson(
      transactionalTemplatesVersionOutputSchema,
      requestOptions
    );
  }

  /**
   * **This endpoint allows you to edit the content of your template version.**
   *
   * @param templateId   The ID of the original template
   * @param versionId    The ID of the template version
   * @param onBehalfOf   Example: The subuser's username. This header
   *                                                                   generates the API call as if the subuser account
   *                                                                   was making the call.
   * @param body
   * @return Response from the API call
   */
  async pATCHTemplatesTemplateIdVersionsVersionId(
    templateId: string,
    versionId: string,
    onBehalfOf?: string,
    body?: TransactionalTemplatesVersionCreate,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TransactionalTemplatesVersionOutput>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      templateId: [templateId, string()],
      versionId: [versionId, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(transactionalTemplatesVersionCreateSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    req.appendTemplatePath`/v3/templates/${mapped.templateId}/versions/${mapped.versionId}`;
    return req.callAsJson(
      transactionalTemplatesVersionOutputSchema,
      requestOptions
    );
  }

  /**
   * **This endpoint allows you to delete a transactional template version.**
   *
   * @param templateId   The ID of the original template
   * @param versionId    The ID of the template version
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async dELETETemplatesTemplateIdVersionsVersionId(
    templateId: string,
    versionId: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      templateId: [templateId, string()],
      versionId: [versionId, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/templates/${mapped.templateId}/versions/${mapped.versionId}`;
    return req.call(requestOptions);
  }

  /**
   * **This endpoint allows you to activate a version of one of your templates.**
   *
   * @param templateId   The ID of the original template
   * @param versionId    The ID of the template version
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async pOSTTemplatesTemplateIdVersionsVersionIdActivate(
    templateId: string,
    versionId: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TransactionalTemplatesVersionOutput>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      templateId: [templateId, string()],
      versionId: [versionId, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/templates/${mapped.templateId}/versions/${mapped.versionId}/activate`;
    return req.callAsJson(
      transactionalTemplatesVersionOutputSchema,
      requestOptions
    );
  }
}
