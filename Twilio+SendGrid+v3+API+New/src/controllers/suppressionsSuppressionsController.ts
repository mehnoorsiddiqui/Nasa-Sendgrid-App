/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  SuppressionsRequestBody,
  suppressionsRequestBodySchema,
} from '../models/suppressionsRequestBody';
import {
  V3AsmGroupsSuppressionsResponse,
  v3AsmGroupsSuppressionsResponseSchema,
} from '../models/v3AsmGroupsSuppressionsResponse';
import {
  V3AsmSuppressionsResponse,
  v3AsmSuppressionsResponseSchema,
} from '../models/v3AsmSuppressionsResponse';
import {
  V3AsmSuppressionsResponse1,
  v3AsmSuppressionsResponse1Schema,
} from '../models/v3AsmSuppressionsResponse1';
import { array, nullable, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class SuppressionsSuppressionsController extends BaseController {
  /**
   * **This endpoint allows you to add email addresses to an unsubscribe group.**
   *
   * If you attempt to add suppressions to a group that has been deleted or does not exist, the
   * suppressions will be added to the global suppressions list.
   *
   * @param groupId      The id of the unsubscribe group that you are adding
   *                                                       suppressions to.
   * @param onBehalfOf   Example: The subuser's username. This header generates the
   *                                                       API call as if the subuser account was making the call.
   * @param body
   * @return Response from the API call
   */
  async pOSTAsmGroupsGroupIdSuppressions(
    groupId: string,
    onBehalfOf?: string,
    body?: SuppressionsRequestBody,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3AsmGroupsSuppressionsResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      groupId: [groupId, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(suppressionsRequestBodySchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    req.appendTemplatePath`/v3/asm/groups/${mapped.groupId}/suppressions`;
    return req.callAsJson(
      v3AsmGroupsSuppressionsResponseSchema,
      requestOptions
    );
  }

  /**
   * **This endpoint allows you to retrieve all suppressed email addresses belonging to the given group.
   * **
   *
   * @param groupId      The id of the unsubscribe group that you are adding suppressions to.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETAsmGroupsGroupIdSuppressions(
    groupId: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<string[]>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      groupId: [groupId, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/asm/groups/${mapped.groupId}/suppressions`;
    return req.callAsJson(array(string()), requestOptions);
  }

  /**
   * **This endpoint allows you to search a suppression group for multiple suppressions.**
   *
   * When given a list of email addresses and a group ID, this endpoint will only return the email
   * addresses that have been unsubscribed from the given group.
   *
   * @param groupId      The ID of the suppression group that you would like to
   *                                                       search.
   * @param onBehalfOf   Example: The subuser's username. This header generates the
   *                                                       API call as if the subuser account was making the call.
   * @param body
   * @return Response from the API call
   */
  async pOSTAsmGroupsGroupIdSuppressionsSearch(
    groupId: string,
    onBehalfOf?: string,
    body?: SuppressionsRequestBody,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<string[]>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      groupId: [groupId, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(suppressionsRequestBodySchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    req.appendTemplatePath`/v3/asm/groups/${mapped.groupId}/suppressions/search`;
    return req.callAsJson(array(string()), requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve a list of all suppressions.**
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETAsmSuppressions(
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3AsmSuppressionsResponse[]>> {
    const req = this.createRequest('GET', '/v3/asm/suppressions');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    return req.callAsJson(
      array(v3AsmSuppressionsResponseSchema),
      requestOptions
    );
  }

  /**
   * **This endpoint returns a list of all groups from which the given email address has been
   * unsubscribed.**
   *
   * @param email        The email address that you want to search suppression groups for.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETAsmSuppressionsEmail(
    email: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3AsmSuppressionsResponse1>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      email: [email, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/asm/suppressions/${mapped.email}`;
    return req.callAsJson(v3AsmSuppressionsResponse1Schema, requestOptions);
  }

  /**
   * **This endpoint allows you to remove a suppressed email address from the given suppression group.**
   *
   * Removing an address will remove the suppression, meaning email will once again be sent to the
   * previously suppressed addresses. This should be avoided unless a recipient indicates they wish to
   * receive email from you again. You can use our [bypass filters](https://sendgrid.com/docs/ui/sending-
   * email/index-suppressions/#bypass-suppressions) to deliver messages to otherwise suppressed addresses
   * when exceptions are required.
   *
   * @param groupId      The id of the suppression group that you are removing an email address from.
   * @param email        The email address that you want to remove from the suppression group.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async dELETEAsmGroupsGroupIdSuppressionsEmail(
    groupId: string,
    email: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      groupId: [groupId, string()],
      email: [email, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/asm/groups/${mapped.groupId}/suppressions/${mapped.email}`;
    return req.callAsJson(nullable(unknown()), requestOptions);
  }
}
