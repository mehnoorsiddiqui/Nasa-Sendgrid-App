/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  GlobalErrorResponseSchema1Error,
} from '../errors/globalErrorResponseSchema1Error';
import { V3MailSend500Error1Error } from '../errors/v3MailSend500Error1Error';
import {
  V3VerifiedSenders400Error1Error,
} from '../errors/v3VerifiedSenders400Error1Error';
import {
  V3VerifiedSenders403Error1Error,
} from '../errors/v3VerifiedSenders403Error1Error';
import {
  V3VerifiedSenders403Error21Error,
} from '../errors/v3VerifiedSenders403Error21Error';
import {
  V3VerifiedSenders404Error1Error,
} from '../errors/v3VerifiedSenders404Error1Error';
import {
  V3VerifiedSendersResend400Error1Error,
} from '../errors/v3VerifiedSendersResend400Error1Error';
import {
  V3VerifiedSendersResend404Error1Error,
} from '../errors/v3VerifiedSendersResend404Error1Error';
import {
  V3VerifiedSendersVerify404Error1Error,
} from '../errors/v3VerifiedSendersVerify404Error1Error';
import {
  V3VerifiedSendersDomainsResponse,
  v3VerifiedSendersDomainsResponseSchema,
} from '../models/v3VerifiedSendersDomainsResponse';
import {
  V3VerifiedSendersResponse,
  v3VerifiedSendersResponseSchema,
} from '../models/v3VerifiedSendersResponse';
import {
  V3VerifiedSendersStepsCompletedResponse,
  v3VerifiedSendersStepsCompletedResponseSchema,
} from '../models/v3VerifiedSendersStepsCompletedResponse';
import {
  VerifiedSenderRequestSchema,
  verifiedSenderRequestSchemaSchema,
} from '../models/verifiedSenderRequestSchema';
import {
  VerifiedSenderResponseSchema,
  verifiedSenderResponseSchemaSchema,
} from '../models/verifiedSenderResponseSchema';
import { number, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class SenderVerificationController extends BaseController {
  /**
   * **This endpoint returns a list of domains known to implement DMARC and categorizes them by failure
   * type — hard failure or soft failure**.
   *
   * Domains listed as hard failures will not deliver mail when used as a [Sender Identity](https:
   * //sendgrid.com/docs/for-developers/sending-email/sender-identity/) due to the domain's DMARC policy
   * settings.
   *
   * For example, using a `yahoo.com` email address as a Sender Identity will likely result in the
   * rejection of your mail. For more information about DMARC, see [Everything about DMARC](https:
   * //sendgrid.com/docs/ui/sending-email/dmarc/).
   *
   * @return Response from the API call
   */
  async gETVerifiedSendersDomains(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3VerifiedSendersDomainsResponse>> {
    const req = this.createRequest('GET', '/v3/verified_senders/domains');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(
      v3VerifiedSendersDomainsResponseSchema,
      requestOptions
    );
  }

  /**
   * **This endpoint allows you to determine which of SendGrid’s verification processes have been
   * completed for an account**.
   *
   * This endpoint returns boolean values, `true` and `false`, for [Domain Authentication](https:
   * //sendgrid.com/docs/for-developers/sending-email/sender-identity/#domain-authentication),
   * `domain_verified`, and [Single Sender Verification](https://sendgrid.com/docs/for-developers/sending-
   * email/sender-identity/#single-sender-verification), `sender_verified`, for the account.
   *
   * An account may have one, both, or neither verification steps completed. If you need to authenticate
   * a domain rather than a Single Sender, see the "Authenticate a domain" endpoint.
   *
   * @return Response from the API call
   */
  async gETVerifiedSendersStepsCompleted(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3VerifiedSendersStepsCompletedResponse>> {
    const req = this.createRequest(
      'GET',
      '/v3/verified_senders/steps_completed'
    );
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(
      v3VerifiedSendersStepsCompletedResponseSchema,
      requestOptions
    );
  }

  /**
   * **This endpoint allows you to verify a sender requests.**
   *
   * The token is generated by SendGrid and included in a verification email delivered to the address
   * that's pending verification.
   *
   * @param token
   * @return Response from the API call
   */
  async gETVerifiedSendersVerifyToken(
    token: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ token: [token, string()] });
    req.appendTemplatePath`/v3/verified_senders/verify/${mapped.token}`;
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, V3VerifiedSendersVerify404Error1Error, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.call(requestOptions);
  }

  /**
   * **This endpoint allows you to update an existing Sender Identity**.
   *
   * Pass the `id` assigned to a Sender Identity to this endpoint as a path parameter. Include any fields
   * you wish to update in the request body in JSON format.
   *
   * You can retrieve the IDs associated with Sender Identities by passing a `GET` request to the Get All
   * Verified Senders endpoint, `/verified_senders`.
   *
   * **Note:** Unlike a `PUT` request, `PATCH` allows you to update only the fields you wish to edit.
   * Fields that are not passed as part of a request will remain unaltered.
   *
   * @param id
   * @param body
   * @return Response from the API call
   */
  async pATCHVerifiedSendersId(
    id: string,
    body?: VerifiedSenderRequestSchema,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<VerifiedSenderResponseSchema>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      id: [id, string()],
      body: [body, optional(verifiedSenderRequestSchemaSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/v3/verified_senders/${mapped.id}`;
    req.throwOn(400, V3VerifiedSenders400Error1Error, '');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, V3VerifiedSenders403Error1Error, '');
    req.throwOn(404, V3VerifiedSenders404Error1Error, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(verifiedSenderResponseSchemaSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to delete a Sender Identity**.
   *
   * Pass the `id` assigned to a Sender Identity to this endpoint to delete the Sender Identity from your
   * account.
   *
   * You can retrieve the IDs associated with Sender Identities using the "Get All Verified Senders"
   * endpoint.
   *
   * @param id
   * @return Response from the API call
   */
  async dELETEVerifiedSendersId(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/v3/verified_senders/${mapped.id}`;
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, V3VerifiedSenders403Error21Error, '');
    req.throwOn(404, V3VerifiedSenders404Error1Error, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * **This endpoint allows you to create a new Sender Identify**.
   *
   * Upon successful submission of a `POST` request to this endpoint, an identity will be created, and a
   * verification email will be sent to the address assigned to the `from_email` field. You must complete
   * the verification process using the sent email to fully verify the sender.
   *
   * If you need to resend the verification email, you can do so with the Resend Verified Sender Request,
   * `/resend/{id}`, endpoint.
   *
   * If you need to authenticate a domain rather than a Single Sender, see the [Domain Authentication
   * API](https://sendgrid.api-docs.io/v3.0/domain-authentication/authenticate-a-domain).
   *
   * @param body
   * @return Response from the API call
   */
  async pOSTVerifiedSenders(
    body?: VerifiedSenderRequestSchema,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<VerifiedSenderResponseSchema>> {
    const req = this.createRequest('POST', '/v3/verified_senders');
    const mapped = req.prepareArgs({
      body: [body, optional(verifiedSenderRequestSchemaSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, V3VerifiedSenders400Error1Error, '');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(verifiedSenderResponseSchemaSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve all the Sender Identities associated with an account.**
   *
   * This endpoint will return both verified and unverified senders.
   *
   * You can limit the number of results returned using the `limit`, `lastSeenID`, and `id` query string
   * parameters.
   *
   * * `limit` allows you to specify an exact number of Sender Identities to return.
   * * `lastSeenID` will return senders with an ID number occuring after the passed in ID. In other words,
   * the `lastSeenID` provides a starting point from which SendGrid will iterate to find Sender
   * Identities associated with your account.
   * * `id` will return information about only the Sender Identity passed in the request.
   *
   * @param limit
   * @param lastSeenID
   * @param id
   * @return Response from the API call
   */
  async gETVerifiedSenders(
    limit?: number,
    lastSeenID?: number,
    id?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3VerifiedSendersResponse>> {
    const req = this.createRequest('GET', '/v3/verified_senders');
    const mapped = req.prepareArgs({
      limit: [limit, optional(number())],
      lastSeenID: [lastSeenID, optional(number())],
      id: [id, optional(number())],
    });
    req.query('limit', mapped.limit);
    req.query('lastSeenID', mapped.lastSeenID);
    req.query('id', mapped.id);
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(v3VerifiedSendersResponseSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to resend a verification email to a specified Sender Identity**.
   *
   * Passing the `id` assigned to a Sender Identity to this endpoint will resend a verification email to
   * the `from_address` associated with the Sender Identity. This can be useful if someone loses their
   * verification email or needs to have it resent for any other reason.
   *
   * You can retrieve the IDs associated with Sender Identities by passing a "Get All Verified Senders"
   * endpoint.
   *
   * @param id
   * @return Response from the API call
   */
  async pOSTVerifiedSendersResendId(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/v3/verified_senders/resend/${mapped.id}`;
    req.throwOn(400, V3VerifiedSendersResend400Error1Error, '');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, V3VerifiedSendersResend404Error1Error, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(unknown(), requestOptions);
  }
}
