/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  V3WhitelabelIpsValidate404Error,
} from '../errors/v3WhitelabelIpsValidate404Error';
import {
  V3WhitelabelIpsValidate500Error,
} from '../errors/v3WhitelabelIpsValidate500Error';
import { ReverseDNS, reverseDNSSchema } from '../models/reverseDNS';
import {
  V3WhitelabelIpsRequest,
  v3WhitelabelIpsRequestSchema,
} from '../models/v3WhitelabelIpsRequest';
import {
  V3WhitelabelIpsValidateResponse,
  v3WhitelabelIpsValidateResponseSchema,
} from '../models/v3WhitelabelIpsValidateResponse';
import { array, number, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class ReverseDNSController extends BaseController {
  /**
   * **This endpoint allows you to set up reverse DNS.**
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the
   *                                                      API call as if the subuser account was making the call.
   * @param body
   * @return Response from the API call
   */
  async pOSTWhitelabelIps(
    onBehalfOf?: string,
    body?: V3WhitelabelIpsRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ReverseDNS>> {
    const req = this.createRequest('POST', '/v3/whitelabel/ips');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(v3WhitelabelIpsRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    return req.callAsJson(reverseDNSSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve all of the Reverse DNS records created by this account.**
   *
   * You may include a search key by using the `ip` query string parameter. This enables you to perform a
   * prefix search for a given IP segment (e.g., `?ip="192."`).
   *
   * Use the `limit` query string parameter to reduce the number of records returned. All records will be
   * returned if you have fewer records than the specified limit.
   *
   * The `offset` query string parameter allows you to specify a non-zero index from which records will
   * be returned. For example, if you have ten records, `?offset=5` will return the last five records (at
   * indexes 5 through 9). The list starts at index zero.
   *
   * @param limit        The maximum number of results to retrieve.
   * @param offset       The point in the list of results to begin retrieving IP addresses from.
   * @param ip           The IP address segment that you'd like to use in a prefix search.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETWhitelabelIps(
    limit?: number,
    offset?: number,
    ip?: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ReverseDNS[]>> {
    const req = this.createRequest('GET', '/v3/whitelabel/ips');
    const mapped = req.prepareArgs({
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
      ip: [ip, optional(string())],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    req.query('ip', mapped.ip);
    return req.callAsJson(array(reverseDNSSchema), requestOptions);
  }

  /**
   * **This endpoint allows you to validate a reverse DNS record.**
   *
   * Always check the `valid` property of the response’s `validation_results.a_record` object. This field
   * will indicate whether it was possible to validate the reverse DNS record. If the `validation_results.
   * a_record.valid` is `false`, this indicates only that Twilio SendGrid could not determine the
   * validity your reverse DNS record — it may still be valid.
   *
   * If validity couldn’t be determined, you can check the value of `validation_results.a_record.reason`
   * to find out why.
   *
   * You can retrieve the IDs associated with all your reverse DNS records using the "Retrieve all
   * reverse DNS records" endpoint.
   *
   * @param id           The ID of the reverse DNS record that you would like to validate.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async pOSTWhitelabelIpsIdValidate(
    id: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3WhitelabelIpsValidateResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      id: [id, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/whitelabel/ips/${mapped.id}/validate`;
    req.throwOn(404, V3WhitelabelIpsValidate404Error, 'Unexpected error in API call. See HTTP response body for details.');
    req.throwOn(500, V3WhitelabelIpsValidate500Error, '');
    return req.callAsJson(
      v3WhitelabelIpsValidateResponseSchema,
      requestOptions
    );
  }

  /**
   * **This endpoint allows you to retrieve a reverse DNS record.**
   *
   * You can retrieve the IDs associated with all your reverse DNS records using the "Retrieve all
   * reverse DNS records" endpoint.
   *
   * @param id           The ID of the reverse DNS record that you would like to retrieve.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETWhitelabelIpsId(
    id: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ReverseDNS>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      id: [id, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/whitelabel/ips/${mapped.id}`;
    return req.callAsJson(reverseDNSSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to delete a reverse DNS record.**
   *
   * A call to this endpoint will respond with a 204 status code if the deletion was successful.
   *
   * You can retrieve the IDs associated with all your reverse DNS records using the "Retrieve all
   * reverse DNS records" endpoint.
   *
   * @param id           The ID of the reverse DNS record that you would like to retrieve.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async dELETEWhitelabelIpsId(
    id: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      id: [id, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/whitelabel/ips/${mapped.id}`;
    return req.callAsJson(unknown(), requestOptions);
  }
}
