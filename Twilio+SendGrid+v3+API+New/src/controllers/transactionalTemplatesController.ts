/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { V3Templates400Error1Error } from '../errors/v3Templates400Error1Error';
import {
  Generations1Enum,
  generations1EnumSchema,
} from '../models/generations1Enum';
import {
  TransactionalTemplatesTemplate,
  transactionalTemplatesTemplateSchema,
} from '../models/transactionalTemplatesTemplate';
import {
  V3TemplatesRequest,
  v3TemplatesRequestSchema,
} from '../models/v3TemplatesRequest';
import {
  V3TemplatesRequest1,
  v3TemplatesRequest1Schema,
} from '../models/v3TemplatesRequest1';
import {
  V3TemplatesRequest2,
  v3TemplatesRequest2Schema,
} from '../models/v3TemplatesRequest2';
import {
  V3TemplatesResponse,
  v3TemplatesResponseSchema,
} from '../models/v3TemplatesResponse';
import { number, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class TransactionalTemplatesController extends BaseController {
  /**
   * **This endpoint allows you to create a transactional template.**
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the API
   *                                                  call as if the subuser account was making the call.
   * @param body
   * @return Response from the API call
   */
  async pOSTTemplates(
    onBehalfOf?: string,
    body?: V3TemplatesRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TransactionalTemplatesTemplate>> {
    const req = this.createRequest('POST', '/v3/templates');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(v3TemplatesRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    return req.callAsJson(transactionalTemplatesTemplateSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve all transactional templates.**
   *
   * @param pageSize     The number of templates to be returned in each page of results
   * @param generations  Comma-delimited list specifying which generations of templates to return.
   *                                         Options are `legacy`, `dynamic` or `legacy,dynamic`.
   * @param pageToken    A token corresponding to a specific page of results, as provided by
   *                                         metadata
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if
   *                                         the subuser account was making the call.
   * @return Response from the API call
   */
  async gETTemplates(
    pageSize: number,
    generations?: Generations1Enum,
    pageToken?: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3TemplatesResponse>> {
    const req = this.createRequest('GET', '/v3/templates');
    const mapped = req.prepareArgs({
      pageSize: [pageSize, number()],
      generations: [generations, optional(generations1EnumSchema)],
      pageToken: [pageToken, optional(string())],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.query('page_size', mapped.pageSize);
    req.query('generations', mapped.generations);
    req.query('page_token', mapped.pageToken);
    req.throwOn(400, V3Templates400Error1Error, '');
    return req.callAsJson(v3TemplatesResponseSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to duplicate a transactional template.**
   *
   * @param templateId
   * @param onBehalfOf   Example: The subuser's username. This header generates the API
   *                                                   call as if the subuser account was making the call.
   * @param body
   * @return Response from the API call
   */
  async pOSTTemplatesTemplateId(
    templateId: string,
    onBehalfOf?: string,
    body?: V3TemplatesRequest1,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TransactionalTemplatesTemplate>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      templateId: [templateId, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(v3TemplatesRequest1Schema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    req.appendTemplatePath`/v3/templates/${mapped.templateId}`;
    return req.callAsJson(transactionalTemplatesTemplateSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve a single transactional template.**
   *
   * @param templateId
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETTemplatesTemplateId(
    templateId: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TransactionalTemplatesTemplate>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      templateId: [templateId, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/templates/${mapped.templateId}`;
    return req.callAsJson(transactionalTemplatesTemplateSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to edit the name of a transactional template.**
   *
   * To edit the template itself, [create a new transactional template version](https://sendgrid.api-docs.
   * io/v3.0/transactional-templates-versions/create-a-new-transactional-template-version).
   *
   * @param templateId
   * @param onBehalfOf   Example: The subuser's username. This header generates the API
   *                                                   call as if the subuser account was making the call.
   * @param body
   * @return Response from the API call
   */
  async pATCHTemplatesTemplateId(
    templateId: string,
    onBehalfOf?: string,
    body?: V3TemplatesRequest2,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TransactionalTemplatesTemplate>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      templateId: [templateId, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(v3TemplatesRequest2Schema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    req.appendTemplatePath`/v3/templates/${mapped.templateId}`;
    return req.callAsJson(transactionalTemplatesTemplateSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to delete a transactional template.**
   *
   * @param templateId
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async dELETETemplatesTemplateId(
    templateId: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      templateId: [templateId, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/templates/${mapped.templateId}`;
    return req.callAsJson(unknown(), requestOptions);
  }
}
