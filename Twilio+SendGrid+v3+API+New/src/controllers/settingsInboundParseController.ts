/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  GlobalErrorResponseSchema1Error,
} from '../errors/globalErrorResponseSchema1Error';
import { V3MailSend500Error1Error } from '../errors/v3MailSend500Error1Error';
import { ParseSetting, parseSettingSchema } from '../models/parseSetting';
import { optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class SettingsInboundParseController extends BaseController {
  /**
   * **This endpoint allows you to create a new inbound parse setting.**
   *
   * Creating an Inbound Parse setting requires two pieces of information: a `url` and a `hostname`.
   *
   * The `hostname` must correspond to a domain authenticated by Twilio SendGrid on your account. If you
   * need to complete domain authentication, you can use the [Twilio SendGrid App](https://app.sendgrid.
   * com/settings/sender_auth) or the "Authenticate a domain" endpoint. See "[How to Set Up Domain
   * Authentication](https://sendgrid.com/docs/ui/account-and-settings/how-to-set-up-domain-
   * authentication/)" for instructions.
   *
   * Any email received by the `hostname` will be parsed when you complete this setup. You must also add
   * a Twilio SendGrid MX record to this domain's DNS records. See "[Setting up the Inbound Parse
   * Webhook](https://sendgrid.com/docs/for-developers/parsing-email/setting-up-the-inbound-parse-
   * webhook/)" for full instructions.
   *
   * The `url` represents a location where the parsed message data will be delivered. Twilio SendGrid
   * will make an HTTP POST request to this `url` with the message data. The `url` must be publicly
   * reachable, and your application must return a `200` status code to signal that the message data has
   * been received.
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as
   *                                            if the subuser account was making the call.
   * @param body
   * @return Response from the API call
   */
  async pOSTUserWebhooksParseSettings(
    onBehalfOf?: string,
    body?: ParseSetting,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ParseSetting>> {
    const req = this.createRequest('POST', '/v3/user/webhooks/parse/settings');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(parseSettingSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(parseSettingSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve a specific inbound parse setting by hostname.**
   *
   * You can retrieve all your Inbound Parse settings and their associated host names with the "Retrieve
   * all parse settings" endpoint.
   *
   * @param hostname     The hostname associated with the inbound parse setting that you would like to
   *                               retrieve.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETUserWebhooksParseSettingsHostname(
    hostname: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ParseSetting>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      hostname: [hostname, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/user/webhooks/parse/settings/${mapped.hostname}`;
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(parseSettingSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to update a specific inbound parse setting by hostname.**
   *
   * You can retrieve all your Inbound Parse settings and their associated host names with the "Retrieve
   * all parse settings" endpoint.
   *
   * @param hostname     The hostname associated with the inbound parse setting that you would
   *                                            like to retrieve.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as
   *                                            if the subuser account was making the call.
   * @param body
   * @return Response from the API call
   */
  async pATCHUserWebhooksParseSettingsHostname(
    hostname: string,
    onBehalfOf?: string,
    body?: ParseSetting,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ParseSetting>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      hostname: [hostname, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(parseSettingSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    req.appendTemplatePath`/v3/user/webhooks/parse/settings/${mapped.hostname}`;
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(parseSettingSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to delete a specific inbound parse setting by hostname.**
   *
   * You can retrieve all your Inbound Parse settings and their associated host names with the "Retrieve
   * all parse settings" endpoint.
   *
   * @param hostname     The hostname associated with the inbound parse setting that you would like to
   *                               retrieve.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async dELETEUserWebhooksParseSettingsHostname(
    hostname: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      hostname: [hostname, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/user/webhooks/parse/settings/${mapped.hostname}`;
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(unknown(), requestOptions);
  }
}
