/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  V3MarketingContactsSearch500Error1Error,
} from '../errors/v3MarketingContactsSearch500Error1Error';
import {
  V3MarketingSegments500Error1Error,
} from '../errors/v3MarketingSegments500Error1Error';
import { V3Teammates400Error1Error } from '../errors/v3Teammates400Error1Error';
import { Message, messageSchema } from '../models/message';
import {
  V3MessagesResponse,
  v3MessagesResponseSchema,
} from '../models/v3MessagesResponse';
import { number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class QueryController extends BaseController {
  /**
   * Filter all messages to search your Email Activity. All queries must be [URL encoded](https:
   * //meyerweb.com/eric/tools/dencoder/), and use the following format:
   *
   * `query={query_type}="{query_content}"`
   *
   * Once URL encoded, the previous query will look like this:
   *
   * `query=type%3D%22query_content%22`
   *
   * For example, to filter by a specific email, use the following query:
   *
   * `query=to_email%3D%22example%40example.com%22`
   *
   * Visit our [Query Reference section](https://docs.sendgrid.com/for-developers/sending-email/getting-
   * started-email-activity-api#query-reference) to see a full list of basic query types and examples.
   *
   * @param query         Use the query syntax  to filter your email activity.
   * @param authorization
   * @param limit         The number of messages returned. This parameter must be greater than 0 and less
   *                                than or equal to 1000
   * @return Response from the API call
   */
  async gETMessages(
    query: string,
    authorization: string,
    limit?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3MessagesResponse>> {
    const req = this.createRequest('GET', '/v3/messages');
    const mapped = req.prepareArgs({
      query: [query, string()],
      authorization: [authorization, string()],
      limit: [limit, optional(number())],
    });
    req.header('Authorization', mapped.authorization);
    req.query('query', mapped.query);
    req.query('limit', mapped.limit);
    req.throwOn(400, V3MarketingSegments500Error1Error, '');
    req.throwOn(429, V3MarketingContactsSearch500Error1Error, '');
    return req.callAsJson(v3MessagesResponseSchema, requestOptions);
  }

  /**
   * Get all of the details about the specified message.
   *
   * @param msgId         The ID of the message you are requesting details for.
   * @param authorization
   * @return Response from the API call
   */
  async gETV3MessagesMsgId(
    msgId: string,
    authorization: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Message>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      msgId: [msgId, string()],
      authorization: [authorization, string()],
    });
    req.header('Authorization', mapped.authorization);
    req.appendTemplatePath`/v3/messages/${mapped.msgId}`;
    req.throwOn(400, V3MarketingContactsSearch500Error1Error, '');
    req.throwOn(404, V3Teammates400Error1Error, '');
    req.throwOn(429, V3MarketingContactsSearch500Error1Error, '');
    return req.callAsJson(messageSchema, requestOptions);
  }
}
