/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { Error10Error } from '../errors/error10Error';
import {
  V3MarketingLists400Error1Error,
} from '../errors/v3MarketingLists400Error1Error';
import {
  V3MarketingLists404Error1Error,
} from '../errors/v3MarketingLists404Error1Error';
import { List1, list1Schema } from '../models/list1';
import {
  V3MarketingListsContactsCountResponse,
  v3MarketingListsContactsCountResponseSchema,
} from '../models/v3MarketingListsContactsCountResponse';
import {
  V3MarketingListsContactsResponse1,
  v3MarketingListsContactsResponse1Schema,
} from '../models/v3MarketingListsContactsResponse1';
import {
  V3MarketingListsRequest,
  v3MarketingListsRequestSchema,
} from '../models/v3MarketingListsRequest';
import {
  V3MarketingListsRequest1,
  v3MarketingListsRequest1Schema,
} from '../models/v3MarketingListsRequest1';
import {
  V3MarketingListsResponse,
  v3MarketingListsResponseSchema,
} from '../models/v3MarketingListsResponse';
import {
  V3MarketingListsResponse1,
  v3MarketingListsResponse1Schema,
} from '../models/v3MarketingListsResponse1';
import {
  V3MarketingListsResponse7,
  v3MarketingListsResponse7Schema,
} from '../models/v3MarketingListsResponse7';
import { boolean, number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class ListsController extends BaseController {
  /**
   * **This endpoint creates a new contacts list.**
   *
   * Once you create a list, you can use the UI to [trigger an automation](https://sendgrid.
   * com/docs/ui/sending-email/getting-started-with-automation/#create-an-automation) every time you add
   * a new contact to the list.
   *
   * A link to the newly created object is in `_metadata`.
   *
   * @param body
   * @return Response from the API call
   */
  async pOSTMcLists(
    body?: V3MarketingListsRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<List1>> {
    const req = this.createRequest('POST', '/v3/marketing/lists');
    const mapped = req.prepareArgs({
      body: [body, optional(v3MarketingListsRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, V3MarketingLists400Error1Error, '');
    return req.callAsJson(list1Schema, requestOptions);
  }

  /**
   * **This endpoint returns an array of all of your contact lists.**
   *
   * @param pageSize   Maximum number of elements to return. Defaults to 100, returns 1000 max
   * @param pageToken
   * @return Response from the API call
   */
  async gETMcLists(
    pageSize?: number,
    pageToken?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3MarketingListsResponse>> {
    const req = this.createRequest('GET', '/v3/marketing/lists');
    const mapped = req.prepareArgs({
      pageSize: [pageSize, optional(number())],
      pageToken: [pageToken, optional(string())],
    });
    req.query('page_size', mapped.pageSize);
    req.query('page_token', mapped.pageToken);
    return req.callAsJson(v3MarketingListsResponseSchema, requestOptions);
  }

  /**
   * **This endpoint returns the number of contacts on a specific list.**
   *
   * @param id
   * @return Response from the API call
   */
  async gETMcListsIdContactsCount(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3MarketingListsContactsCountResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/v3/marketing/lists/${mapped.id}/contacts/count`;
    req.throwOn(404, ApiError, '');
    return req.callAsJson(
      v3MarketingListsContactsCountResponseSchema,
      requestOptions
    );
  }

  /**
   * **This endpoint returns data about a specific list.**
   *
   * Setting the optional parameter `contact_sample=true` returns the `contact_sample` in the response
   * body. Up to fifty of the most recent contacts uploaded or attached to a list will be returned,
   * sorted alphabetically, by email address.
   *
   * The full contact count is also returned.
   *
   * @param id
   * @param contactSample  Setting this parameter to the true  will cause the contact_sample to be
   *                                  returned
   * @return Response from the API call
   */
  async gETMcListsId(
    id: string,
    contactSample?: boolean,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3MarketingListsResponse1>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      id: [id, string()],
      contactSample: [contactSample, optional(boolean())],
    });
    req.query('contact_sample', mapped.contactSample);
    req.appendTemplatePath`/v3/marketing/lists/${mapped.id}`;
    req.throwOn(404, Error10Error, '');
    return req.callAsJson(v3MarketingListsResponse1Schema, requestOptions);
  }

  /**
   * **This endpoint updates the name of a list.**
   *
   * @param id
   * @param body
   * @return Response from the API call
   */
  async pATCHMcListsId(
    id: string,
    body?: V3MarketingListsRequest1,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<List1>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      id: [id, string()],
      body: [body, optional(v3MarketingListsRequest1Schema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/v3/marketing/lists/${mapped.id}`;
    req.throwOn(400, V3MarketingLists400Error1Error, '');
    req.throwOn(404, ApiError, '');
    return req.callAsJson(list1Schema, requestOptions);
  }

  /**
   * **This endpoint allows you to deletes a specific list.**
   *
   * Optionally, you can also delete contacts associated to the list. The query parameter,
   * `delete_contacts=true`, will delete the list and start an asynchronous job to delete associated
   * contacts.
   *
   * @param id
   * @param deleteContacts  Flag indicates that all contacts on the list are also to be deleted.
   * @return Response from the API call
   */
  async dELETEListsId(
    id: string,
    deleteContacts?: boolean,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3MarketingListsResponse7>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      id: [id, string()],
      deleteContacts: [deleteContacts, optional(boolean())],
    });
    req.query('delete_contacts', mapped.deleteContacts);
    req.appendTemplatePath`/v3/marketing/lists/${mapped.id}`;
    req.throwOn(404, V3MarketingLists404Error1Error, '');
    return req.callAsJson(v3MarketingListsResponse7Schema, requestOptions);
  }

  /**
   * **This endpoint allows you to remove contacts from a given list.**
   *
   * The contacts will not be deleted. Only their list membership will be changed.
   *
   * @param id
   * @param contactIds  comma separated list of contact ids
   * @return Response from the API call
   */
  async dELETEMcListsIdContacts(
    id: string,
    contactIds: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3MarketingListsContactsResponse1>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      id: [id, string()],
      contactIds: [contactIds, string()],
    });
    req.query('contact_ids', mapped.contactIds);
    req.appendTemplatePath`/v3/marketing/lists/${mapped.id}/contacts`;
    req.throwOn(400, Error10Error, '');
    req.throwOn(404, ApiError, '');
    return req.callAsJson(
      v3MarketingListsContactsResponse1Schema,
      requestOptions
    );
  }
}
