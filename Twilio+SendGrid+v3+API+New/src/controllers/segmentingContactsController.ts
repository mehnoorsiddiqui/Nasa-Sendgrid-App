/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  GlobalErrorResponseSchema1Error,
} from '../errors/globalErrorResponseSchema1Error';
import {
  V3MarketingSegments404Error1Error,
} from '../errors/v3MarketingSegments404Error1Error';
import {
  V3MarketingSegments500Error1Error,
} from '../errors/v3MarketingSegments500Error1Error';
import { FullSegment, fullSegmentSchema } from '../models/fullSegment';
import { SegmentWrite, segmentWriteSchema } from '../models/segmentWrite';
import {
  V3MarketingSegmentsRequest,
  v3MarketingSegmentsRequestSchema,
} from '../models/v3MarketingSegmentsRequest';
import {
  V3MarketingSegmentsResponse,
  v3MarketingSegmentsResponseSchema,
} from '../models/v3MarketingSegmentsResponse';
import { array, boolean, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class SegmentingContactsController extends BaseController {
  /**
   * **This endpoint allows you to create a segment.**
   *
   * @param body
   * @return Response from the API call
   */
  async pOSTMarketingSegments(
    body?: V3MarketingSegmentsRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<FullSegment>> {
    const req = this.createRequest('POST', '/v3/marketing/segments');
    const mapped = req.prepareArgs({
      body: [body, optional(v3MarketingSegmentsRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '');
    req.throwOn(500, V3MarketingSegments500Error1Error, '');
    return req.callAsJson(fullSegmentSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve a list of segments.**
   *
   * The query param `parent_list_ids` is treated as a filter.  Any match will be returned.  Zero matches
   * will return a response code of 200 with an empty `results` array.
   *
   * `parent_list_ids` | `no_parent_list_id` | `ids` | `result`
   * -----------------:|:--------------------:|:-------------:|:-------------:
   * empty | false | empty | all segments values
   * list_ids | false | empty | segments filtered by list_ids values
   * list_ids |true | empty | segments filtered by list_ids and segments with no parent list_ids empty
   * empty | true | empty | segments with no parent list_ids
   * anything | anything | ids | segments with matching segment ids |
   *
   * @param ids               A list of segment IDs to retrieve. When this parameter is included, the
   *                                      `no_parent_list_ids` and `parent_list_ids` parameters are ignored and only
   *                                      segments with given IDs are returned.
   * @param parentListIds     A comma separated list of list ids to be used when searching for segments
   *                                      with the specified parent_list_id, no more than 50 is allowed
   * @param noParentListId    If set to `true` segments with an empty value of `parent_list_id` will be
   *                                      returned in the filter.  If the value is not present it defaults to 'false'.
   * @return Response from the API call
   */
  async gETMarketingSegments(
    ids?: string[],
    parentListIds?: string,
    noParentListId?: boolean,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3MarketingSegmentsResponse>> {
    const req = this.createRequest('GET', '/v3/marketing/segments');
    const mapped = req.prepareArgs({
      ids: [ids, optional(array(string()))],
      parentListIds: [parentListIds, optional(string())],
      noParentListId: [noParentListId, optional(boolean())],
    });
    req.query('ids', mapped.ids);
    req.query('parent_list_ids', mapped.parentListIds);
    req.query('no_parent_list_id', mapped.noParentListId);
    req.throwOn(401, GlobalErrorResponseSchema1Error, 'error');
    req.throwOn(403, GlobalErrorResponseSchema1Error, 'error');
    req.throwOn(404, GlobalErrorResponseSchema1Error, 'error');
    req.throwOn(500, V3MarketingSegments500Error1Error, 'error');
    return req.callAsJson(v3MarketingSegmentsResponseSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve a single segment by ID.**
   *
   * @param segmentId
   * @param queryJson  Defaults to `false`.  Set to `true` to return the parsed SQL AST as a JSON object in
   *                              the field `query_json`
   * @return Response from the API call
   */
  async gETMarketingSegmentsSegmentId(
    segmentId: string,
    queryJson?: boolean,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<FullSegment>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      segmentId: [segmentId, string()],
      queryJson: [queryJson, optional(boolean())],
    });
    req.query('query_json', mapped.queryJson);
    req.appendTemplatePath`/v3/marketing/segments/${mapped.segmentId}`;
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, V3MarketingSegments404Error1Error, '');
    req.throwOn(500, V3MarketingSegments500Error1Error, '');
    return req.callAsJson(fullSegmentSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to update a segment.**
   *
   * Segment `name` needs to be unique. A user can not update a segment name to an existing one.
   *
   * @param segmentId
   * @param body
   * @return Response from the API call
   */
  async pATCHMarketingSegmentsSegmentId(
    segmentId: string,
    body?: SegmentWrite,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<FullSegment>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      segmentId: [segmentId, string()],
      body: [body, optional(segmentWriteSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/v3/marketing/segments/${mapped.segmentId}`;
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, V3MarketingSegments404Error1Error, '');
    req.throwOn(500, V3MarketingSegments500Error1Error, '');
    return req.callAsJson(fullSegmentSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to delete a segment by `segment_id`.**
   *
   * Note that deleting a segment does not delete the contacts associated with the segment by default.
   * Contacts associated with a deleted segment will remain in your list of all contacts and any other
   * segments they belong to.
   *
   * @param segmentId
   * @return Response from the API call
   */
  async dELETEMarketingSegmentsSegmentId(
    segmentId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ segmentId: [segmentId, string()] });
    req.appendTemplatePath`/v3/marketing/segments/${mapped.segmentId}`;
    req.throwOn(400, GlobalErrorResponseSchema1Error, '');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, V3MarketingSegments404Error1Error, '');
    req.throwOn(500, V3MarketingSegments500Error1Error, '');
    return req.callAsJson(unknown(), requestOptions);
  }
}
