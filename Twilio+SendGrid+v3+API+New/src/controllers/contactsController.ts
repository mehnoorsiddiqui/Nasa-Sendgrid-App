/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import {
  GlobalErrorResponseSchema1Error,
} from '../errors/globalErrorResponseSchema1Error';
import { V3MailSend500Error1Error } from '../errors/v3MailSend500Error1Error';
import {
  V3MarketingContacts400Error1Error,
} from '../errors/v3MarketingContacts400Error1Error';
import {
  V3MarketingContacts400Error21Error,
} from '../errors/v3MarketingContacts400Error21Error';
import {
  V3MarketingContactsExports400Error1Error,
} from '../errors/v3MarketingContactsExports400Error1Error';
import {
  V3MarketingContactsExports400Error21Error,
} from '../errors/v3MarketingContactsExports400Error21Error';
import {
  V3MarketingContactsImports400Error1Error,
} from '../errors/v3MarketingContactsImports400Error1Error';
import {
  V3MarketingContactsImports400Error21Error,
} from '../errors/v3MarketingContactsImports400Error21Error';
import {
  V3MarketingContactsSearch400Error1Error,
} from '../errors/v3MarketingContactsSearch400Error1Error';
import {
  V3MarketingContactsSearch500Error1Error,
} from '../errors/v3MarketingContactsSearch500Error1Error';
import {
  V3MarketingContactsSearchEmails500Error1Error,
} from '../errors/v3MarketingContactsSearchEmails500Error1Error';
import {
  V3MarketingFieldDefinitions400Error1Error,
} from '../errors/v3MarketingFieldDefinitions400Error1Error';
import {
  ContactDetails3,
  contactDetails3Schema,
} from '../models/contactDetails3';
import { ContactExport, contactExportSchema } from '../models/contactExport';
import { ContactImport, contactImportSchema } from '../models/contactImport';
import {
  V3MarketingContactsBatchRequest1,
  v3MarketingContactsBatchRequest1Schema,
} from '../models/v3MarketingContactsBatchRequest1';
import {
  V3MarketingContactsBatchResponse,
  v3MarketingContactsBatchResponseSchema,
} from '../models/v3MarketingContactsBatchResponse';
import {
  V3MarketingContactsCountResponse,
  v3MarketingContactsCountResponseSchema,
} from '../models/v3MarketingContactsCountResponse';
import {
  V3MarketingContactsExportsRequest,
  v3MarketingContactsExportsRequestSchema,
} from '../models/v3MarketingContactsExportsRequest';
import {
  V3MarketingContactsExportsResponse,
  v3MarketingContactsExportsResponseSchema,
} from '../models/v3MarketingContactsExportsResponse';
import {
  V3MarketingContactsExportsResponse1,
  v3MarketingContactsExportsResponse1Schema,
} from '../models/v3MarketingContactsExportsResponse1';
import {
  V3MarketingContactsImportsRequest,
  v3MarketingContactsImportsRequestSchema,
} from '../models/v3MarketingContactsImportsRequest';
import {
  V3MarketingContactsImportsResponse,
  v3MarketingContactsImportsResponseSchema,
} from '../models/v3MarketingContactsImportsResponse';
import {
  V3MarketingContactsRequest,
  v3MarketingContactsRequestSchema,
} from '../models/v3MarketingContactsRequest';
import {
  V3MarketingContactsResponse,
  v3MarketingContactsResponseSchema,
} from '../models/v3MarketingContactsResponse';
import {
  V3MarketingContactsResponse2,
  v3MarketingContactsResponse2Schema,
} from '../models/v3MarketingContactsResponse2';
import {
  V3MarketingContactsResponse3,
  v3MarketingContactsResponse3Schema,
} from '../models/v3MarketingContactsResponse3';
import {
  V3MarketingContactsSearchEmailsRequest,
  v3MarketingContactsSearchEmailsRequestSchema,
} from '../models/v3MarketingContactsSearchEmailsRequest';
import {
  V3MarketingContactsSearchEmailsResponse,
  v3MarketingContactsSearchEmailsResponseSchema,
} from '../models/v3MarketingContactsSearchEmailsResponse';
import {
  V3MarketingContactsSearchRequest,
  v3MarketingContactsSearchRequestSchema,
} from '../models/v3MarketingContactsSearchRequest';
import {
  V3MarketingContactsSearchResponse,
  v3MarketingContactsSearchResponseSchema,
} from '../models/v3MarketingContactsSearchResponse';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class ContactsController extends BaseController {
  /**
   * **This endpoint allows the [upsert](https://en.wiktionary.org/wiki/upsert) (insert or update) of up
   * to 30,000 contacts, or 6MB of data, whichever is lower**.
   *
   * Because the creation and update of contacts is an asynchronous process, the response will not
   * contain immediate feedback on the processing of your upserted contacts. Rather, it will contain an
   * HTTP 202 response indicating the contacts are queued for processing or an HTTP 4XX error containing
   * validation errors. Should you wish to get the resulting contact's ID or confirm your contacts have
   * been updated or added, you can use the "Get Contacts by Emails" endpoint.
   *
   * Please note that custom fields need to have been already created if you wish to set their values for
   * the contacts being upserted. To do this, please use the "Create Custom Field Definition" endpoint.
   *
   * You will see a `job_id` in the response to your request. This can be used to check the status of
   * your upsert job. To do so, please use the "Import Contacts Status" endpoint.
   *
   * If the contact already exists in the system, any entries submitted via this endpoint will update the
   * existing contact. The contact to update will be determined only by the `email` field and any fields
   * omitted from the request will remain as they were. A contact's ID cannot be used to update the
   * contact.
   *
   * The email field will be changed to all lower-case. If a contact is added with an email that exists
   * but contains capital letters, the existing contact with the all lower-case email will be updated.
   *
   * @param body
   * @return Response from the API call
   */
  async pUTMcContacts(
    body?: V3MarketingContactsRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3MarketingContactsResponse>> {
    const req = this.createRequest('PUT', '/v3/marketing/contacts');
    const mapped = req.prepareArgs({
      body: [body, optional(v3MarketingContactsRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, V3MarketingContacts400Error1Error, '');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(v3MarketingContactsResponseSchema, requestOptions);
  }

  /**
   * **This endpoint can be used to delete one or more contacts**.
   *
   * The query parameter `ids` must set to a comma-separated list of contact IDs for bulk contact
   * deletion.
   *
   * The query parameter `delete_all_contacts` must be set to `"true"` to delete **all** contacts.
   *
   * You must set either `ids` or `delete_all_contacts`.
   *
   * Deletion jobs are processed asynchronously.
   *
   * Twilio SendGrid recommends exporting your contacts regularly as a backup to avoid issues or lost
   * data.
   *
   * @param deleteAllContacts   Must be set to `"true"` to delete all contacts.
   * @param ids                 A comma-separated list of contact IDs.
   * @return Response from the API call
   */
  async dELETEMcContacts(
    deleteAllContacts?: string,
    ids?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3MarketingContactsResponse3>> {
    const req = this.createRequest('DELETE', '/v3/marketing/contacts');
    const mapped = req.prepareArgs({
      deleteAllContacts: [deleteAllContacts, optional(string())],
      ids: [ids, optional(string())],
    });
    req.query('delete_all_contacts', mapped.deleteAllContacts);
    req.query('ids', mapped.ids);
    req.throwOn(400, V3MarketingContacts400Error21Error, '');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(v3MarketingContactsResponse3Schema, requestOptions);
  }

  /**
   * **This endpoint will return up to 50 of the most recent contacts uploaded or attached to a list**.
   *
   * This list will then be sorted by email address.
   *
   * The full contact count is also returned.
   *
   * Please note that pagination of the contacts has been deprecated.
   *
   * Twilio SendGrid recommends exporting your contacts regularly as a backup to avoid issues or lost
   * data.
   *
   * @return Response from the API call
   */
  async gETMcContats(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3MarketingContactsResponse2>> {
    const req = this.createRequest('GET', '/v3/marketing/contacts');
    req.throwOn(400, V3MarketingContacts400Error1Error, '');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, ApiError, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(v3MarketingContactsResponse2Schema, requestOptions);
  }

  /**
   * **This endpoint returns the total number of contacts you have stored.**
   *
   *
   * Twilio SendGrid recommends exporting your contacts regularly as a backup to avoid issues or lost
   * data.
   *
   * @return Response from the API call
   */
  async gETMcContactsCount(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3MarketingContactsCountResponse>> {
    const req = this.createRequest('GET', '/v3/marketing/contacts/count');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(
      v3MarketingContactsCountResponseSchema,
      requestOptions
    );
  }

  /**
   * **This endpoint returns the full details and all fields for the specified contact**.
   *
   * The "Get Contacts by Emails" endpoint can be used to get the ID of a contact.
   *
   * @param id
   * @return Response from the API call
   */
  async gETMcContactsId(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ContactDetails3>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/v3/marketing/contacts/${mapped.id}`;
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, ApiError, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(contactDetails3Schema, requestOptions);
  }

  /**
   * **Use this endpoint to locate contacts**.
   *
   * The request body's `query` field accepts valid [SGQL](https://sendgrid.com/docs/for-
   * developers/sending-email/segmentation-query-language/) for searching for a contact.
   *
   * Because contact emails are stored in lower case, using SGQL to search by email address requires the
   * provided email address to be in lower case. The SGQL `lower()` function can be used for this.
   *
   * Only the first 50 contacts that meet the search criteria will be returned.
   *
   * If the query takes longer than 20 seconds, a `408 Request Timeout` status will be returned.
   *
   * Formatting the `created_at` and `updated_at` values as Unix timestamps is deprecated. Instead they
   * are returned as ISO format as string.
   *
   * @param body
   * @return Response from the API call
   */
  async pOSTMcContactsSearch(
    body?: V3MarketingContactsSearchRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3MarketingContactsSearchResponse>> {
    const req = this.createRequest('POST', '/v3/marketing/contacts/search');
    const mapped = req.prepareArgs({
      body: [body, optional(v3MarketingContactsSearchRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, V3MarketingContactsSearch400Error1Error, '');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '');
    req.throwOn(408, ApiError, '');
    req.throwOn(500, V3MarketingContactsSearch500Error1Error, '');
    return req.callAsJson(
      v3MarketingContactsSearchResponseSchema,
      requestOptions
    );
  }

  /**
   * **This endpoint allows a CSV upload containing up to one million contacts or 5GB of data, whichever
   * is smaller.**
   *
   * Imports take place asynchronously: the endpoint returns a URL (`upload_uri`) and HTTP headers
   * (`upload_headers`) which can subsequently be used to `PUT` a file of contacts to be  imported into
   * our system.
   *
   * Uploaded CSV files may also be [gzip-compressed](https://en.wikipedia.org/wiki/Gzip).
   *
   * In either case, you must include the field `file_type` with the value `csv` in your request body.
   *
   * The `field_mappings` paramter is a respective list of field definition IDs to map the uploaded CSV
   * columns to. It allows you to use CSVs where one or more columns are skipped (`null`) or remapped to
   * the contact field.
   *
   * For example, if `field_mappings` is set to `[null, "w1", "_rf1"]`, this means skip column 0, map
   * column 1 to the custom field with the ID `w1`, and map column 2 to the reserved field with the ID
   * `_rf1`. See the "Get All Field Definitions" endpoint to fetch your custom and reserved field IDs to
   * use with `field_mappings`.
   *
   * Once you recieve the response body you can then initiate a **second** API call where you use the
   * supplied URL and HTTP header to upload your file. For example:
   *
   * `curl --upload-file "file/path.csv" "URL_GIVEN" -H 'HEADER_GIVEN'`
   *
   * If you'd like to monitor the status of your import job, use the `job_id` and the "Import Contacts
   * Status" endpoint.
   *
   * Twilio SendGrid recommends exporting your contacts regularly as a backup to avoid issues or lost
   * data.
   *
   * @param body
   * @return Response from the API call
   */
  async pUTMcContactsImports(
    body?: V3MarketingContactsImportsRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3MarketingContactsImportsResponse>> {
    const req = this.createRequest('PUT', '/v3/marketing/contacts/imports');
    const mapped = req.prepareArgs({
      body: [body, optional(v3MarketingContactsImportsRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, V3MarketingContactsImports400Error1Error, '');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, V3MarketingFieldDefinitions400Error1Error, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(
      v3MarketingContactsImportsResponseSchema,
      requestOptions
    );
  }

  /**
   * **This endpoint can be used to check the status of a contact import job**.
   *
   * Use the `job_id` from the "Import Contacts," "Add or Update a Contact," or "Delete Contacts"
   * endpoints as the `id` in the path parameter.
   *
   * If there is an error with your `PUT` request, download the `errors_url` file and open it to view
   * more details.
   *
   * The job `status` field indicates whether the job is `pending`, `completed`, `errored`, or `failed`.
   *
   * Pending means not started. Completed means finished without any errors. Errored means finished with
   * some errors. Failed means finshed with all errors, or the job was entirely unprocessable: for
   * example, if you attempt to import file format we do not support.
   *
   * The `results` object will have fields depending on the job type.
   *
   * Twilio SendGrid recommends exporting your contacts regularly as a backup to avoid issues or lost
   * data.
   *
   * @param id
   * @return Response from the API call
   */
  async gETMarketingContactsImportsId(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ContactImport>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/v3/marketing/contacts/imports/${mapped.id}`;
    req.throwOn(400, V3MarketingContactsImports400Error21Error, '');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(contactImportSchema, requestOptions);
  }

  /**
   * **Use this endpoint to export lists or segments of contacts**.
   *
   * If you would just like to have a link to the exported list sent to your email set the `notifications.
   * email` option to `true` in the `POST` payload.
   *
   * If you would like to download the list, take the `id` that is returned and use the "Export Contacts
   * Status" endpoint to get the `urls`. Once you have the list of URLs, make a `GET` request to each URL
   * provided to download your CSV file(s).
   *
   * You specify the segements and or/contact lists you wish to export by providing the relevant IDs in,
   * respectively, the `segment_ids` and `list_ids` fields in the request body.
   *
   * The lists will be provided in either JSON or CSV files. To specify which of these you would required,
   * set the request body `file_type` field to `json` or `csv`.
   *
   * You can also specify a maximum file size (in MB). If the export file is larger than this, it will be
   * split into multiple files.
   *
   * @param body
   * @return Response from the API call
   */
  async pOSTMcContactsExports(
    body?: V3MarketingContactsExportsRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3MarketingContactsExportsResponse>> {
    const req = this.createRequest('POST', '/v3/marketing/contacts/exports');
    const mapped = req.prepareArgs({
      body: [body, optional(v3MarketingContactsExportsRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, V3MarketingContactsExports400Error1Error, '');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(
      v3MarketingContactsExportsResponseSchema,
      requestOptions
    );
  }

  /**
   * **Use this endpoint to retrieve details of all current exported jobs**.
   *
   * It will return an array of objects, each of which records an export job in flight or recently
   * completed.
   *
   * Each object's `export_type` field will tell you which kind of export it is and its `status` field
   * will indicate what stage of processing it has reached. Exports which are `ready` will be accompanied
   * by a `urls` field which lists the URLs of the export's downloadable files — there will be more than
   * one if you specified a maximum file size in your initial export request.
   *
   * Use this endpoint if you have exports in flight but do not know their IDs, which are required for
   * the "Export Contacts Status" endpoint.
   *
   * @return Response from the API call
   */
  async gETMarketingContactsExports(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3MarketingContactsExportsResponse1>> {
    const req = this.createRequest('GET', '/v3/marketing/contacts/exports');
    req.throwOn(400, V3MarketingContactsExports400Error21Error, '');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(
      v3MarketingContactsExportsResponse1Schema,
      requestOptions
    );
  }

  /**
   * **This endpoint can be used to check the status of a contact export job**.
   *
   * To use this call, you will need the `id` from the "Export Contacts" call.
   *
   * If you would like to download a list, take the `id` that is returned from the "Export Contacts"
   * endpoint and make an API request here to get the `urls`. Once you have the list of URLs, make a
   * `GET` request on each URL to download your CSV file(s).
   *
   * Twilio SendGrid recommends exporting your contacts regularly as a backup to avoid issues or lost
   * data.
   *
   * @param id
   * @return Response from the API call
   */
  async gETMcContactsExportsId(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ContactExport>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/v3/marketing/contacts/exports/${mapped.id}`;
    req.throwOn(400, V3MarketingContactsExports400Error1Error, '');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(contactExportSchema, requestOptions);
  }

  /**
   * **This endpoint is used to retrieve a set of contacts identified by their IDs.**
   *
   * This can be more efficient endpoint to get contacts than making a series of individual `GET`
   * requests to the "Get a Contact by ID" endpoint.
   *
   * You can supply up to 100 IDs. Pass them into the `ids` field in your request body as an array or one
   * or more strings.
   *
   * Twilio SendGrid recommends exporting your contacts regularly as a backup to avoid issues or lost
   * data.
   *
   * @param body
   * @return Response from the API call
   */
  async pOSTMarketingContactsBatch(
    body?: V3MarketingContactsBatchRequest1,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3MarketingContactsBatchResponse>> {
    const req = this.createRequest('POST', '/v3/marketing/contacts/batch');
    const mapped = req.prepareArgs({
      body: [body, optional(v3MarketingContactsBatchRequest1Schema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, ApiError, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(
      v3MarketingContactsBatchResponseSchema,
      requestOptions
    );
  }

  /**
   * **This endpoint allows you to retrieve up to 100 contacts matching the searched `email` address(es),
   * including any `alternate_emails`.**
   *
   * Email addresses are unique to a contact, meaning this endpoint can treat an email address as a
   * primary key to search by. The contact object associated with the address, whether it is their
   * `email` or one of their `alternate_emails` will be returned if matched.
   *
   * Email addresses in the search request do not need to match the case in which they're stored, but the
   * email addresses in the result will be all lower case. Empty strings are excluded from the search and
   * will not be returned.
   *
   * This endpoint should be used in place of the "Search Contacts" endpoint when you can provide exact
   * email addresses and do not need to include other [Segmentation Query Language (SGQL)](https:
   * //sendgrid.com/docs/for-developers/sending-email/segmentation-query-language/) filters when
   * searching.
   *
   * If you need to access a large percentage of your contacts, we recommend exporting your contacts with
   * the "Export Contacts" endpoint and filtering the results client side.
   *
   * This endpoint returns a `200` status code when any contacts match the address(es) you supplied. When
   * searching multiple addresses in a single request, it is possible that some addresses will match a
   * contact while others will not. When a partially successful search like this is made, the matching
   * contacts are returned in an object and an error message is returned for the email address(es) that
   * are not found.
   *
   * This endpoint returns a `404` status code when no contacts are found for the provided email
   * address(es).
   *
   * A `400` status code is returned if any searched addresses are invalid.
   *
   * Twilio SendGrid recommends exporting your contacts regularly as a backup to avoid issues or lost
   * data.
   *
   * @param body
   * @return Response from the API call
   */
  async pOSTMarketingContactsSearchEmails(
    body?: V3MarketingContactsSearchEmailsRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3MarketingContactsSearchEmailsResponse>> {
    const req = this.createRequest(
      'POST',
      '/v3/marketing/contacts/search/emails'
    );
    const mapped = req.prepareArgs({
      body: [body, optional(v3MarketingContactsSearchEmailsRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, GlobalErrorResponseSchema1Error, '');
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '');
    req.throwOn(500, V3MarketingContactsSearchEmails500Error1Error, '');
    return req.callAsJson(
      v3MarketingContactsSearchEmailsResponseSchema,
      requestOptions
    );
  }
}
