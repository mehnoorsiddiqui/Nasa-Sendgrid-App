/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  V3WhitelabelDomainsValidate500Error,
} from '../errors/v3WhitelabelDomainsValidate500Error';
import {
  DomainAuthentication,
  domainAuthenticationSchema,
} from '../models/domainAuthentication';
import {
  DomainAuthentication200Response,
  domainAuthentication200ResponseSchema,
} from '../models/domainAuthentication200Response';
import {
  DomainAuthenticationMandatorySubdomain,
  domainAuthenticationMandatorySubdomainSchema,
} from '../models/domainAuthenticationMandatorySubdomain';
import {
  V3WhitelabelDomainsIpsRequest,
  v3WhitelabelDomainsIpsRequestSchema,
} from '../models/v3WhitelabelDomainsIpsRequest';
import {
  V3WhitelabelDomainsRequest,
  v3WhitelabelDomainsRequestSchema,
} from '../models/v3WhitelabelDomainsRequest';
import {
  V3WhitelabelDomainsRequest1,
  v3WhitelabelDomainsRequest1Schema,
} from '../models/v3WhitelabelDomainsRequest1';
import {
  V3WhitelabelDomainsSubuserRequest,
  v3WhitelabelDomainsSubuserRequestSchema,
} from '../models/v3WhitelabelDomainsSubuserRequest';
import {
  V3WhitelabelDomainsValidateResponse,
  v3WhitelabelDomainsValidateResponseSchema,
} from '../models/v3WhitelabelDomainsValidateResponse';
import { array, boolean, number, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class DomainAuthenticationController extends BaseController {
  /**
   * **This endpoint allows you to retrieve a list of all domains you have authenticated.**
   *
   * @param limit            Number of domains to return.
   * @param offset           Paging offset.
   * @param excludeSubusers  Exclude subuser domains from the result.
   * @param username         The username associated with an authenticated domain.
   * @param domain           Search for authenticated domains.
   * @param onBehalfOf       Example: The subuser's username. This header generates the API call as if the
   *                                    subuser account was making the call.
   * @return Response from the API call
   */
  async gETWhitelabelDomains(
    limit?: number,
    offset?: number,
    excludeSubusers?: boolean,
    username?: string,
    domain?: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DomainAuthentication200Response[]>> {
    const req = this.createRequest('GET', '/v3/whitelabel/domains');
    const mapped = req.prepareArgs({
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
      excludeSubusers: [excludeSubusers, optional(boolean())],
      username: [username, optional(string())],
      domain: [domain, optional(string())],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    req.query('exclude_subusers', mapped.excludeSubusers);
    req.query('username', mapped.username);
    req.query('domain', mapped.domain);
    return req.callAsJson(
      array(domainAuthentication200ResponseSchema),
      requestOptions
    );
  }

  /**
   * **This endpoint allows you to authenticate a domain.**
   *
   * If you are authenticating a domain for a subuser, you have two options:
   * 1. Use the "username" parameter. This allows you to authenticate a domain on behalf of your subuser.
   * This means the subuser is able to see and modify the authenticated domain.
   * 2. Use the Association workflow (see Associate Domain section). This allows you to authenticate a
   * domain created by the parent to a subuser. This means the subuser will default to the assigned
   * domain, but will not be able to see or modify that authenticated domain. However, if the subuser
   * authenticates their own domain it will overwrite the assigned domain.
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates
   *                                                          the API call as if the subuser account was making the
   *                                                          call.
   * @param body
   * @return Response from the API call
   */
  async pOSTWhitelabelDomains(
    onBehalfOf?: string,
    body?: V3WhitelabelDomainsRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DomainAuthenticationMandatorySubdomain>> {
    const req = this.createRequest('POST', '/v3/whitelabel/domains');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(v3WhitelabelDomainsRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    return req.callAsJson(
      domainAuthenticationMandatorySubdomainSchema,
      requestOptions
    );
  }

  /**
   * **This endpoint allows you to retrieve a specific authenticated domain.**
   *
   * @param domainId
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETWhitelabelDomainsDomainId(
    domainId: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DomainAuthenticationMandatorySubdomain>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      domainId: [domainId, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/whitelabel/domains/${mapped.domainId}`;
    return req.callAsJson(
      domainAuthenticationMandatorySubdomainSchema,
      requestOptions
    );
  }

  /**
   * **This endpoint allows you to update the settings for an authenticated domain.**
   *
   * @param domainId
   * @param onBehalfOf   Example: The subuser's username. This header generates
   *                                                           the API call as if the subuser account was making the
   *                                                           call.
   * @param body
   * @return Response from the API call
   */
  async pATCHWhitelabelDomainsDomainId(
    domainId: string,
    onBehalfOf?: string,
    body?: V3WhitelabelDomainsRequest1,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DomainAuthentication200Response[]>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      domainId: [domainId, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(v3WhitelabelDomainsRequest1Schema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    req.appendTemplatePath`/v3/whitelabel/domains/${mapped.domainId}`;
    return req.callAsJson(
      array(domainAuthentication200ResponseSchema),
      requestOptions
    );
  }

  /**
   * **This endpoint allows you to delete an authenticated domain.**
   *
   * @param domainId
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async dELETEWhitelabelDomainsDomainId(
    domainId: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      domainId: [domainId, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/whitelabel/domains/${mapped.domainId}`;
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve the default authentication for a domain.**
   *
   * When creating or updating a domain authentication, you can set the domain as a default. The default
   * domain will be used to send all mail. If you have multiple authenticated domains, the authenticated
   * domain matching the domain of the From address will be used, and the default will be overridden.
   *
   * This endpoint will return a default domain and its details only if a default is set. You are not
   * required to set a default. If you do not set a default domain, this endpoint will return general
   * information about your domain authentication status.
   *
   * @param domain       The domain to find a default authentication.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETWhitelabelDomainsDefault(
    domain?: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DomainAuthentication200Response[]>> {
    const req = this.createRequest('GET', '/v3/whitelabel/domains/default');
    const mapped = req.prepareArgs({
      domain: [domain, optional(string())],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.query('domain', mapped.domain);
    return req.callAsJson(
      array(domainAuthentication200ResponseSchema),
      requestOptions
    );
  }

  /**
   * **This endpoint allows you to add an IP address to an authenticated domain.**
   *
   * @param id           ID of the domain to which you are adding an IP
   * @param onBehalfOf   Example: The subuser's username. This header
   *                                                             generates the API call as if the subuser account was
   *                                                             making the call.
   * @param body
   * @return Response from the API call
   */
  async pOSTWhitelabelDomainsIdIps(
    id: number,
    onBehalfOf?: string,
    body?: V3WhitelabelDomainsIpsRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DomainAuthentication>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      id: [id, number()],
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(v3WhitelabelDomainsIpsRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    req.appendTemplatePath`/v3/whitelabel/domains/${mapped.id}/ips`;
    return req.callAsJson(domainAuthenticationSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to remove an IP address from that domain's authentication.**
   *
   * @param id           ID of the domain to delete the IP from.
   * @param ip           IP to remove from the domain.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async dELETEWhitelabelDomainsIdIpsIp(
    id: number,
    ip: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DomainAuthentication>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      id: [id, number()],
      ip: [ip, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/whitelabel/domains/${mapped.id}/ips/${mapped.ip}`;
    return req.callAsJson(domainAuthenticationSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to validate an authenticated domain. If it fails, it will return an error
   * message describing why the domain could not be validated.**
   *
   * @param id           ID of the domain to validate.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async pOSTWhitelabelDomainsIdValidate(
    id: number,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3WhitelabelDomainsValidateResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      id: [id, number()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/whitelabel/domains/${mapped.id}/validate`;
    req.throwOn(500, V3WhitelabelDomainsValidate500Error, '');
    return req.callAsJson(
      v3WhitelabelDomainsValidateResponseSchema,
      requestOptions
    );
  }

  /**
   * **This endpoint allows you to retrieve all of the authenticated domains that have been assigned to a
   * specific subuser.**
   *
   * Authenticated domains can be associated with (i.e. assigned to) subusers from a parent account. This
   * functionality allows subusers to send mail using their parent's domain authentication. To associate
   * an authenticated domain with a subuser, the parent account must first authenticate and validate the
   * domain. The parent may then associate the authenticated domain via the subuser management tools.
   *
   * @param username Username for the subuser to find associated authenticated domain.
   * @return Response from the API call
   */
  async gETWhitelabelDomainsSubuser(
    username: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DomainAuthentication>> {
    const req = this.createRequest('GET', '/v3/whitelabel/domains/subuser');
    const mapped = req.prepareArgs({ username: [username, string()] });
    req.query('username', mapped.username);
    return req.callAsJson(domainAuthenticationSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to disassociate a specific authenticated domain from a subuser.**
   *
   * Authenticated domains can be associated with (i.e. assigned to) subusers from a parent account. This
   * functionality allows subusers to send mail using their parent's domain authentication. To associate
   * an authenticated domain with a subuser, the parent account must first authenticate and validate the
   * domain. The parent may then associate the authenticated domain via the subuser management tools.
   *
   * @param username Username for the subuser to find associated authenticated domain.
   * @return Response from the API call
   */
  async dELETEWhitelabelDomainsSubuser(
    username?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE', '/v3/whitelabel/domains/subuser');
    const mapped = req.prepareArgs({
      username: [username, optional(string())],
    });
    req.query('username', mapped.username);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * **This endpoint allows you to associate a specific authenticated domain with a subuser.**
   *
   * Authenticated domains can be associated with (i.e. assigned to) subusers from a parent account. This
   * functionality allows subusers to send mail using their parent's domain authentication. To associate
   * an authenticated domain with a subuser, the parent account must first authenticate and validate the
   * domain. The parent may then associate the authenticated domain via the subuser management tools.
   *
   * @param domainId     ID of the authenticated domain to associate with
   *                                                                 the subuser
   * @param body
   * @return Response from the API call
   */
  async pOSTWhitelabelDomainsDomainIdSubuser(
    domainId: number,
    body?: V3WhitelabelDomainsSubuserRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DomainAuthentication>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      domainId: [domainId, number()],
      body: [body, optional(v3WhitelabelDomainsSubuserRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/v3/whitelabel/domains/${mapped.domainId}/subuser`;
    return req.callAsJson(domainAuthenticationSchema, requestOptions);
  }
}
