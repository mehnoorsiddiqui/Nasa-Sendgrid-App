/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  AggregatedBy2Enum,
  aggregatedBy2EnumSchema,
} from '../models/aggregatedBy2Enum';
import {
  SortByDirection1Enum,
  sortByDirection1EnumSchema,
} from '../models/sortByDirection1Enum';
import {
  SortByMetric1Enum,
  sortByMetric1EnumSchema,
} from '../models/sortByMetric1Enum';
import {
  StatsCategoryStats,
  statsCategoryStatsSchema,
} from '../models/statsCategoryStats';
import { SubuserStats, subuserStatsSchema } from '../models/subuserStats';
import { array, number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class SubuserStatisticsController extends BaseController {
  /**
   * **This endpoint allows you to retrive the monthly email statistics for a specific subuser.**
   *
   * When using the `sort_by_metric` to sort your stats by a specific metric, you can not sort by the
   * following metrics:
   * `bounce_drops`, `deferred`, `invalid_emails`, `processed`, `spam_report_drops`, `spam_reports`, or
   * `unsubscribe_drops`.
   *
   * @param subuserName
   * @param date              The date of the month to retrieve statistics for. Must be
   *                                                  formatted YYYY-MM-DD
   * @param sortByMetric      The metric that you want to sort by. Metrics that you can sort
   *                                                  by are: `blocks`, `bounces`, `clicks`, `delivered`, `opens`,
   *                                                  `requests`, `unique_clicks`, `unique_opens`, and `unsubscribes`.
   *                                                  '
   * @param sortByDirection   The direction you want to sort.
   * @param limit             Optional field to limit the number of results returned.
   * @param offset            Optional beginning point in the list to retrieve from.
   * @return Response from the API call
   */
  async gETSubusersSubuserNameStatsMonthly(
    subuserName: string,
    date: string,
    sortByMetric?: string,
    sortByDirection?: SortByDirection1Enum,
    limit?: number,
    offset?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SubuserStats>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      subuserName: [subuserName, string()],
      date: [date, string()],
      sortByMetric: [sortByMetric, optional(string())],
      sortByDirection: [sortByDirection, optional(sortByDirection1EnumSchema)],
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
    });
    req.query('date', mapped.date);
    req.query('sort_by_metric', mapped.sortByMetric);
    req.query('sort_by_direction', mapped.sortByDirection);
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    req.appendTemplatePath`/v3/subusers/${mapped.subuserName}/stats/monthly`;
    return req.callAsJson(subuserStatsSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve the monthly email statistics for all subusers over the given
   * date range.**
   *
   * When using the `sort_by_metric` to sort your stats by a specific metric, you can not sort by the
   * following metrics:
   * `bounce_drops`, `deferred`, `invalid_emails`, `processed`, `spam_report_drops`, `spam_reports`, or
   * `unsubscribe_drops`.
   *
   * @param date              The date of the month to retrieve statistics for. Must be
   *                                                  formatted YYYY-MM-DD
   * @param subuser           A substring search of your subusers.
   * @param sortByMetric      The metric that you want to sort by. Metrics that you can sort
   *                                                  by are: `blocks`, `bounces`, `clicks`, `delivered`, `opens`,
   *                                                  `requests`, `unique_clicks`, `unique_opens`, and `unsubscribes`.
   *                                                  '
   * @param sortByDirection   The direction you want to sort.
   * @param limit             Optional field to limit the number of results returned.
   * @param offset            Optional beginning point in the list to retrieve from.
   * @return Response from the API call
   */
  async gETSubusersStatsMonthly(
    date: string,
    subuser?: string,
    sortByMetric?: SortByMetric1Enum,
    sortByDirection?: SortByDirection1Enum,
    limit?: number,
    offset?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SubuserStats>> {
    const req = this.createRequest('GET', '/v3/subusers/stats/monthly');
    const mapped = req.prepareArgs({
      date: [date, string()],
      subuser: [subuser, optional(string())],
      sortByMetric: [sortByMetric, optional(sortByMetric1EnumSchema)],
      sortByDirection: [sortByDirection, optional(sortByDirection1EnumSchema)],
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
    });
    req.query('date', mapped.date);
    req.query('subuser', mapped.subuser);
    req.query('sort_by_metric', mapped.sortByMetric);
    req.query('sort_by_direction', mapped.sortByDirection);
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    return req.callAsJson(subuserStatsSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve the total sums of each email statistic metric for all
   * subusers over the given date range.**
   *
   * @param startDate         The starting date of the statistics to retrieve. Must follow
   *                                                  format YYYY-MM-DD.
   * @param sortByDirection   The direction you want to sort.
   * @param endDate           The end date of the statistics to retrieve. Defaults to today.
   *                                                  Must follow format YYYY-MM-DD.
   * @param limit             Limits the number of results returned per page.
   * @param offset            The point in the list to begin retrieving results from.
   * @param aggregatedBy      How to group the statistics. Defaults to today. Must follow
   *                                                  format YYYY-MM-DD.
   * @param sortByMetric      The metric that you want to sort by.  Must be a single metric.
   * @return Response from the API call
   */
  async gETSubusersStatsSums(
    startDate: string,
    sortByDirection?: SortByDirection1Enum,
    endDate?: string,
    limit?: number,
    offset?: number,
    aggregatedBy?: string,
    sortByMetric?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<StatsCategoryStats>> {
    const req = this.createRequest('GET', '/v3/subusers/stats/sums');
    const mapped = req.prepareArgs({
      startDate: [startDate, string()],
      sortByDirection: [sortByDirection, optional(sortByDirection1EnumSchema)],
      endDate: [endDate, optional(string())],
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
      aggregatedBy: [aggregatedBy, optional(string())],
      sortByMetric: [sortByMetric, optional(string())],
    });
    req.query('start_date', mapped.startDate);
    req.query('sort_by_direction', mapped.sortByDirection);
    req.query('end_date', mapped.endDate);
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    req.query('aggregated_by', mapped.aggregatedBy);
    req.query('sort_by_metric', mapped.sortByMetric);
    return req.callAsJson(statsCategoryStatsSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve the email statistics for the given subusers.**
   *
   * You may retrieve statistics for up to 10 different subusers by including an additional _subusers_
   * parameter for each additional subuser.
   *
   * @param subusers      The subuser you want to retrieve statistics for. You may include this
   *                                           parameter up to 10 times to retrieve statistics for multiple subusers.
   * @param startDate     The starting date of the statistics to retrieve. Must follow format
   *                                           YYYY-MM-DD.
   * @param limit         Limits the number of results returned per page.
   * @param offset        The point in the list to begin retrieving results from.
   * @param aggregatedBy  How to group the statistics. Must be either "day", "week", or "month".
   * @param endDate       The end date of the statistics to retrieve. Defaults to today.
   * @return Response from the API call
   */
  async gETSubusersStats(
    subusers: string,
    startDate: string,
    limit?: number,
    offset?: number,
    aggregatedBy?: AggregatedBy2Enum,
    endDate?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<StatsCategoryStats[]>> {
    const req = this.createRequest('GET', '/v3/subusers/stats');
    const mapped = req.prepareArgs({
      subusers: [subusers, string()],
      startDate: [startDate, string()],
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
      aggregatedBy: [aggregatedBy, optional(aggregatedBy2EnumSchema)],
      endDate: [endDate, optional(string())],
    });
    req.query('subusers', mapped.subusers);
    req.query('start_date', mapped.startDate);
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    req.query('aggregated_by', mapped.aggregatedBy);
    req.query('end_date', mapped.endDate);
    return req.callAsJson(array(statsCategoryStatsSchema), requestOptions);
  }
}
