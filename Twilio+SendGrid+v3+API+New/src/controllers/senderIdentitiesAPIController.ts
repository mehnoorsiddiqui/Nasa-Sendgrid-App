/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { V3Teammates400Error1Error } from '../errors/v3Teammates400Error1Error';
import { SenderID, senderIDSchema } from '../models/senderID';
import {
  SenderIDRequest,
  senderIDRequestSchema,
} from '../models/senderIDRequest';
import {
  V3SendersRequest,
  v3SendersRequestSchema,
} from '../models/v3SendersRequest';
import {
  V3SendersResponse,
  v3SendersResponseSchema,
} from '../models/v3SendersResponse';
import { number, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class SenderIdentitiesAPIController extends BaseController {
  /**
   * **This endpoint allows you to create a new sender identity.**
   *
   * You may create up to 100 unique sender identities.
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the API
   *                                                call as if the subuser account was making the call.
   * @param body
   * @return Response from the API call
   */
  async pOSTSenders(
    onBehalfOf?: string,
    body?: V3SendersRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SenderID>> {
    const req = this.createRequest('POST', '/v3/senders');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(v3SendersRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    req.throwOn(400, V3Teammates400Error1Error, '');
    return req.callAsJson(senderIDSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve a list of all sender identities that have been created for
   * your account.**
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETV3Senders(
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3SendersResponse>> {
    const req = this.createRequest('GET', '/v3/senders');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    return req.callAsJson(v3SendersResponseSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve a specific sender identity.**
   *
   * @param senderId     The ID of the sender identity that you want to retrieve.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETV3SendersSenderId(
    senderId: number,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SenderID>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      senderId: [senderId, number()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/senders/${mapped.senderId}`;
    req.throwOn(404, V3Teammates400Error1Error, '');
    return req.callAsJson(senderIDSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to update a sender identity.**
   *
   * Updates to `from.email` require re-verification.
   *
   * Partial updates are allowed, but fields that are marked as "required" in the POST (create) endpoint
   * must not be nil if that field is included in the PATCH request.
   *
   * @param senderId     The ID of the sender identity that you want to retrieve.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call
   *                                               as if the subuser account was making the call.
   * @param body
   * @return Response from the API call
   */
  async pATCHV3SendersSenderId(
    senderId: number,
    onBehalfOf?: string,
    body?: SenderIDRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SenderID>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      senderId: [senderId, number()],
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(senderIDRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    req.appendTemplatePath`/v3/senders/${mapped.senderId}`;
    req.throwOn(400, V3Teammates400Error1Error, '');
    req.throwOn(403, V3Teammates400Error1Error, '');
    req.throwOn(404, V3Teammates400Error1Error, '');
    return req.callAsJson(senderIDSchema, requestOptions);
  }

  /**
   * **This endoint allows you to delete one of your sender identities.**
   *
   * @param senderId     The ID of the sender identity that you want to retrieve.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async dELETEV3SendersSenderId(
    senderId: number,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      senderId: [senderId, number()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/senders/${mapped.senderId}`;
    req.throwOn(403, V3Teammates400Error1Error, '');
    req.throwOn(404, V3Teammates400Error1Error, '');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * **This enpdoint allows you to resend a sender identity verification email.**
   *
   * @param senderId     The ID of the sender identity for which you would like to resend a verification
   *                               email.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async pOSTV3SendersSenderIdResendVerification(
    senderId: number,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      senderId: [senderId, number()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/senders/${mapped.senderId}/resend_verification`;
    req.throwOn(400, V3Teammates400Error1Error, '');
    req.throwOn(404, V3Teammates400Error1Error, '');
    return req.callAsJson(unknown(), requestOptions);
  }
}
