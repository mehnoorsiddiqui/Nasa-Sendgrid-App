/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  ContentTypeEnum,
  contentTypeEnumSchema,
} from '../models/contentTypeEnum';
import { InvalidEmail, invalidEmailSchema } from '../models/invalidEmail';
import { array, number, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class InvalidEmailsAPIController extends BaseController {
  /**
   * **This endpoint allows you to retrieve a list of all invalid email addresses.**
   *
   * @param startTime    Refers start of the time range in unix timestamp when an invalid email was created
   *                               (inclusive).
   * @param endTime      Refers end of the time range in unix timestamp when an invalid email was created
   *                               (inclusive).
   * @param limit        Limit the number of results to be displayed per page.
   * @param offset       Paging offset. The point in the list to begin displaying results.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETSuppressionInvalidEmails(
    startTime?: number,
    endTime?: number,
    limit?: number,
    offset?: number,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<InvalidEmail[]>> {
    const req = this.createRequest('GET', '/v3/suppression/invalid_emails');
    const mapped = req.prepareArgs({
      startTime: [startTime, optional(number())],
      endTime: [endTime, optional(number())],
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.query('start_time', mapped.startTime);
    req.query('end_time', mapped.endTime);
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    return req.callAsJson(array(invalidEmailSchema), requestOptions);
  }

  /**
   * **This endpoint allows you to remove email addresses from your invalid email address list.**
   *
   * There are two options for deleting invalid email addresses:
   *
   * 1) You can delete all invalid email addresses by setting `delete_all` to true in the request body.
   * 2) You can delete some invalid email addresses by specifying certain addresses in an array in the
   * request body.
   *
   * @param contentType
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if
   *                                        the subuser account was making the call.
   * @return Response from the API call
   */
  async dELETESuppressionInvalidEmails(
    contentType: ContentTypeEnum,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE', '/v3/suppression/invalid_emails');
    const mapped = req.prepareArgs({
      contentType: [contentType, contentTypeEnumSchema],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('Content-Type', mapped.contentType);
    req.header('on-behalf-of', mapped.onBehalfOf);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve a specific invalid email addresses.**
   *
   * @param email        The specific email address of the invalid email entry that you want to retrieve.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETSuppressionInvalidEmailsEmail(
    email: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<InvalidEmail[]>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      email: [email, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/suppression/invalid_emails/${mapped.email}`;
    return req.callAsJson(array(invalidEmailSchema), requestOptions);
  }

  /**
   * **This endpoint allows you to remove a specific email address from the invalid email address list.
   * **
   *
   * @param email        The specific email address of the invalid email entry that you want to retrieve.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async dELETESuppressionInvalidEmailsEmail(
    email: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      email: [email, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/suppression/invalid_emails/${mapped.email}`;
    return req.callAsJson(unknown(), requestOptions);
  }
}
