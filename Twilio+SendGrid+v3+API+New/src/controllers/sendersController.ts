/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  GlobalErrorResponseSchema1Error,
} from '../errors/globalErrorResponseSchema1Error';
import { V3MailSend500Error1Error } from '../errors/v3MailSend500Error1Error';
import { SenderID, senderIDSchema } from '../models/senderID';
import {
  V3MarketingSendersRequest,
  v3MarketingSendersRequestSchema,
} from '../models/v3MarketingSendersRequest';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class SendersController extends BaseController {
  /**
   * **This endpoint allows you to create a new sender identity.**
   *
   * *You may create up to 100 unique sender identities.*
   *
   * Sender identities are required to be verified before use. If your domain has been authenticated, a
   * new sender identity will auto verify on creation. Otherwise an email will be sent to the `from.
   * email`.
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates
   *                                                         the API call as if the subuser account was making the call.
   * @param body
   * @return Response from the API call
   */
  async pOSTMarketingSenders(
    onBehalfOf?: string,
    body?: V3MarketingSendersRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SenderID>> {
    const req = this.createRequest('POST', '/v3/marketing/senders');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(v3MarketingSendersRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    req.throwOn(401, GlobalErrorResponseSchema1Error, '');
    req.throwOn(403, GlobalErrorResponseSchema1Error, '');
    req.throwOn(404, GlobalErrorResponseSchema1Error, '');
    req.throwOn(500, V3MailSend500Error1Error, '');
    return req.callAsJson(senderIDSchema, requestOptions);
  }
}
