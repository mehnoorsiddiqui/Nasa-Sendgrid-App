/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { V3Alerts400Error1Error } from '../errors/v3Alerts400Error1Error';
import {
  V3AlertsRequest,
  v3AlertsRequestSchema,
} from '../models/v3AlertsRequest';
import {
  V3AlertsRequest1,
  v3AlertsRequest1Schema,
} from '../models/v3AlertsRequest1';
import {
  V3AlertsResponse,
  v3AlertsResponseSchema,
} from '../models/v3AlertsResponse';
import {
  V3AlertsResponse1,
  v3AlertsResponse1Schema,
} from '../models/v3AlertsResponse1';
import {
  V3AlertsResponse2,
  v3AlertsResponse2Schema,
} from '../models/v3AlertsResponse2';
import { array, number, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class AlertsController extends BaseController {
  /**
   * **This endpoint allows you to create a new alert.**
   *
   * Alerts allow you to specify an email address to receive notifications regarding your email usage or
   * statistics. There are two types of alerts that can be created with this endpoint:
   *
   * * `usage_limit` allows you to set the threshold at which an alert will be sent.
   * * `stats_notification` allows you to set how frequently you would like to receive email statistics
   * reports. For example, "daily", "weekly", or "monthly".
   *
   * For more information about alerts, please see our [Alerts documentation](https://sendgrid.
   * com/docs/ui/account-and-settings/alerts/).
   *
   * @param authorization
   * @param onBehalfOf
   * @param body
   * @return Response from the API call
   */
  async pOSTAlerts(
    authorization?: string,
    onBehalfOf?: string,
    body?: V3AlertsRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3AlertsResponse>> {
    const req = this.createRequest('POST', '/v3/alerts');
    const mapped = req.prepareArgs({
      authorization: [authorization, optional(string())],
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(v3AlertsRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('Authorization', mapped.authorization);
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    req.throwOn(400, V3Alerts400Error1Error, '');
    return req.callAsJson(v3AlertsResponseSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve all of your alerts.**
   *
   * Alerts allow you to specify an email address to receive notifications regarding your email usage or
   * statistics.
   * * Usage alerts allow you to set the threshold at which an alert will be sent.
   * * Stats notifications allow you to set how frequently you would like to receive email statistics
   * reports. For example, "daily", "weekly", or "monthly".
   *
   * For more information about alerts, please see our [Alerts documentation](https://sendgrid.
   * com/docs/ui/account-and-settings/alerts/).
   *
   * @param authorization
   * @param onBehalfOf    Example: The subuser's username. This header generates the API call as if the
   *                                subuser account was making the call.
   * @return Response from the API call
   */
  async gETAlerts(
    authorization?: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3AlertsResponse1[]>> {
    const req = this.createRequest('GET', '/v3/alerts');
    const mapped = req.prepareArgs({
      authorization: [authorization, optional(string())],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('Authorization', mapped.authorization);
    req.header('on-behalf-of', mapped.onBehalfOf);
    return req.callAsJson(array(v3AlertsResponse1Schema), requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve a specific alert.**
   *
   * Alerts allow you to specify an email address to receive notifications regarding your email usage or
   * statistics.
   * * Usage alerts allow you to set the threshold at which an alert will be sent.
   * * Stats notifications allow you to set how frequently you would like to receive email statistics
   * reports. For example, "daily", "weekly", or "monthly".
   *
   * For more information about alerts, please see our [Alerts documentation](https://sendgrid.
   * com/docs/ui/account-and-settings/alerts/).
   *
   * @param alertId       The ID of the alert you would like to retrieve.
   * @param authorization
   * @param onBehalfOf    Example: The subuser's username. This header generates the API call as if the
   *                                subuser account was making the call.
   * @return Response from the API call
   */
  async gETAlertsAlertId(
    alertId: number,
    authorization?: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3AlertsResponse2>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      alertId: [alertId, number()],
      authorization: [authorization, optional(string())],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('Authorization', mapped.authorization);
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/alerts/${mapped.alertId}`;
    return req.callAsJson(v3AlertsResponse2Schema, requestOptions);
  }

  /**
   * **This endpoint allows you to delete an alert.**
   *
   * Alerts allow you to specify an email address to receive notifications regarding your email usage or
   * statistics.
   * * Usage alerts allow you to set the threshold at which an alert will be sent.
   * * Stats notifications allow you to set how frequently you would like to receive email statistics
   * reports. For example, "daily", "weekly", or "monthly".
   *
   * For more information about alerts, please see our [Alerts documentation](https://sendgrid.
   * com/docs/ui/account-and-settings/alerts/).
   *
   * @param alertId      The ID of the alert you would like to retrieve.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async dELETEAlertsAlertId(
    alertId: number,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      alertId: [alertId, number()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.appendTemplatePath`/v3/alerts/${mapped.alertId}`;
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * **This endpoint allows you to update an alert.**
   *
   * Alerts allow you to specify an email address to receive notifications regarding your email usage or
   * statistics.
   * * Usage alerts allow you to set the threshold at which an alert will be sent.
   * * Stats notifications allow you to set how frequently you would like to receive email statistics
   * reports. For example, "daily", "weekly", or "monthly".
   *
   * For more information about alerts, please see our [Alerts documentation](https://sendgrid.
   * com/docs/ui/account-and-settings/alerts/).
   *
   * @param alertId      The ID of the alert you would like to retrieve.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API
   *                                                call as if the subuser account was making the call.
   * @param body
   * @return Response from the API call
   */
  async pATCHAlertsAlertId(
    alertId: number,
    onBehalfOf?: string,
    body?: V3AlertsRequest1,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3AlertsResponse2>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      alertId: [alertId, number()],
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(v3AlertsRequest1Schema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    req.appendTemplatePath`/v3/alerts/${mapped.alertId}`;
    return req.callAsJson(v3AlertsResponse2Schema, requestOptions);
  }
}
